#+TITLE: Arrays - Codealong
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 - Data structures with C++ - Lyon College, FA24
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:1 num:1 ^:nil
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes
* Arrays: Reversing a Series of Numbers

- *Problem:* Prompt the user to enter a series of numbers, then write
  the numbers in reverse order. Store the numbers in an array and use
  a preprocessing directive to set the size of the array. In the =main=
  function, initialize the array's elements to zero.

- *Input* and *Output*:
  #+begin_example
  Enter 10 numbers: 34 82 49 102 2 94 23 11 50 31
  In reverse order: 31 50 11 23 94 2 102 49 82 34
  #+end_example


* Solution

- Strategy:
  1) define size of array with =#define SIZE 10=
  2) declare and initialize array =int a= with zeros ={0}=
  3) first version of program: set =a= with fixed values
  4) to reverse the numbers, print them in reverse order using a =for=
     loop that counts down instead of up.

- For the code, let's remember to comment it and document it.

- Code version 1:
  #+begin_src C :tangle reverse1.c
    /*************************************************************/
    // reverse.c: reverse a series of numbers entered by the user
    // Store numbers as integer array with scanf in a for loop
    // Print numbers in reverse order with printf in a for loop
    // (C) Marcus Birkenkrahe Licence: GPLv3
    /*************************************************************/
    #include <stdio.h>

    // define size of array with `#define SIZE 10`
    #define SIZE 10

    // declare and init array `int a` with zeros `{0}`
    // first version of program: set `a` with fixed values
    int a[] = {34,82,49,102,2,94,23,11,50,31};
    // to reverse the numbers, print them in reverse order
    // using a `for` loop that counts down instead of up.
    for ( int i = 0 ; i < SIZE; i++) { // counting up
      printf("%d ", a[i]);
      }
    printf("\n"); // newline
    for ( int i = SIZE-1; i >= 0; i--) { // counting down
      printf("%d ", a[i]);
      }
  #+end_src

  #+RESULTS:
  : 34 82 49 102 2 94 23 11 50 31 
  : 31 50 11 23 94 2 102 49 82 34 

- Three ways to run this program:

  1) Run the code block with C-c C-c

  2) Tangle the code block into a source code file ~reverse.c~
     with C-c C-v t (this is the same as =org-bable-tangle=).

     Now run it inside this Org-mode file with a ~bash~ block:
     #+begin_src bash :results output
       ls -l reverse1.c  # long listing of the file
       gcc reverse1.c -o rev   # compile source to executable
       ./rev
     #+end_src

     #+RESULTS:
     : -rw-rw-r-- 1 marcus marcus 925 Sep  5 09:54 reverse1.c
     : 34 82 49 102 2 94 23 11 50 31 
     : 31 50 11 23 94 2 102 49 82 34 

  3) Tangle it and compile & run the file on the commandline
     outside of this file:

     - Open the shell INSIDE Emacs with =M-x shell=
     - On the shell, compile with =gcc= and run
     - You may have to go where the file is with =cd=

- Code version 2: Add user input
  1) Change source code file name to ~reverse2.c~
  2) Initialize array to zero
  3) Add a command to ask user for input
  4) Get user input with the =scanf= command
          
  #+begin_src C :tangle reverse2.c
    /*************************************************************/
    // reverse.c: reverse a series of numbers entered by the user
    // Store numbers as integer array with scanf in a for loop
    // Print numbers in reverse order with printf in a for loop
    // (C) Marcus Birkenkrahe Licence: GPLv3
    /*************************************************************/
    #include <stdio.h>
    #define SIZE 10

    int a[SIZE] = {0};

    // Ask user for input
    printf("Enter %d numbers:\n", SIZE);
    // Get user input from keyboard
    for ( int i = 0 ; i < SIZE; i++) { 
      scanf("%d", &a[i]); // scanf requires address-of &
      printf("%d ", a[i]);
      }
    puts("");  // another way to add a new line
    // To reverse the numbers, print them in reverse order
    // using a `for` loop that counts down instead of up.
    for ( int i = SIZE-1; i >= 0; i--) { // counting down
      printf("%d ", a[i]);
      }
    puts("");  // another way to add a new line
  #+end_src

- Test it with a shell code block:
  #+begin_src bash :results output
  gcc reverse2.c -o rev
  echo 34 82 49 102 2 94 23 11 50 31 | ./rev
#+end_src

- Demo the pipe concept:
  #+begin_src bash :results output
  ls | wc -l  # list all files and count the number of lines
  echo hello | wc -c
#+end_src


* Variable length arrays

Variable-Length Arrays (VLAs): The length of array is an input
variable and not known at compile-time but given at run-time.

  - [X] Input operation (test with a shell block)
  - [X] Declare and define VLA
  - [ ] print VLA in reverse order

  - Code:
    #+begin_src C :tangle mainVLA.c
      int i, n;

      printf("How many numbers do you want to reverse?");
      scanf("%d", &n);
      printf("\nOK, %d numbers.\n",n);

      int a[n]; // VLA definition - cannot be initialized

      for (i=0; i<n; i++) {
        scanf("%d", &a[i]);
        printf("%d ", a[i]);
       }

      puts("");
      for (i=n-1; i>=0; i--) {
        printf("%d ", a[i]);
       }
    #+end_src

    #+RESULTS:
    : How many numbers do you want to reverse?
    : OK, 5 numbers.
    : 1 0 1 0 -1622650816 

  - Testing suite (shell code block) - need to tangle!
    #+begin_src bash :results output
      gcc mainVLA.c -o main
      echo 5 30 40 50 60 70 | ./main
    #+end_src 

    #+RESULTS:
    : How many numbers do you want to reverse?
    : OK, 5 numbers.
    : 30 40 50 60 70 
    : 70 60 50 40 30 


* Computing the length of an array

We can compute the length of an array =a= using the =sizeof= operator:

#+begin_src C 
  #define N 10
  #define SIZE (int)(sizeof(a)/sizeof(a[0]))

  int i, a[N];
  printf("SIZE = %d\n", SIZE);

  for (i=0; i<SIZE; i++) {
    a[i] = i*i;
    printf("%d ", a[i]);
   }
#+end_src

#+RESULTS:
: SIZE = 10
: 0 1 4 9 16 25 36 49 64 81 


* Parameter macros

Macros (like =#define=) can have parameters. Every macro has a keyword,
a name and a value or parameter.

- Example 1: =MAX= function.
  #+begin_src C

    #define MAX(x,y) ( (x) > (y) ? (x) : (y) )

    printf("Max value: %d\n", MAX(100,200));

  #+end_src

  #+RESULTS:
  : Max value: 200

- Here, "x > y ? x : y" is short version of:
  #+begin_example C
    if (x > y)
      x
    else
      y
  #+end_example

- Example 2: Function to determine if a number is even
  #+begin_src C

    #define IS_EVEN(n) ((n) % 2 == 0)

    printf("Is 99 even? Answer: %d\n", IS_EVEN(99));
  #+end_src  

  #+RESULTS:
  : Is 99 even? Answer: 0

- Example 3: Use macros to create aliases
  #+begin_src C

    #define PRINT_INT(n) printf("%d\n",n);

    int i = 200;
    PRINT_INT(i);

    int j = 0;
    PRINT_INT(i/j);

  #+end_src

  #+RESULTS:


* TODO Arrays: Checking a Number for Repeated Digits

- *Problem*: Check if any of the digits in a number =n= appear more than
  once. After the user enters a number, the program prints either
  =Repeated digit= or =No repeated digit=.

- *Sample input and output*:
  #+begin_example
  Enter a number: 28212
  Repeated digit
  #+end_example

- *Algorithm*:

  1) Use an array =digit_seen= to keep track of which digits in [0,9]
     appear in a number. Initialize the array to =false= (no digits
     seen). For example, =digit_seen[4]= corresponds to digit 4 and
     holds the value =false= (not seen) at the start.

  2) Loop over the digits of =n= (using modulo 10). Leave loop if =digit=
     has already been seen (=digit_seen[digit] = true=). Otherwise, set
     =digit_seen[digit] = true= (seen for the first time).

  3) If the loop was left at any place then =n>0=, and we have a =Repeated
     digit=, otherwise =No repeated digits=.

- In code version 1, we ignore user input and set the number =n=.

- In code version 2, we add user input using =scanf=.

- Code version 1: Without user input. To be able to use =true= and
  =false= values (instead of =1= and =0=), =include= the header file
  =stdbool.h= - we need to update the code block header for that:
  #+begin_src C :includes <stdbool.h> <stdio.h> :tangle
    /*********************************************************/
    // repdigit.c: checks numbers for repeated digits.
    // Input: number n with (without) repeated digits.
    // Output: Print "Repeated digit" or "No repeated digit."
    // Version 1: number n fixed (no user input)
    /*********************************************************/
    // declare and initialize variables
    bool digit_seen[9] = {false};
    int digit, n = 28212;

    // loop over digit
    while (n>0)

    // print results


  #+end_src
  





