#+TITLE: Arrays - Codealong
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 - Data structures with C++ - Lyon College, FA24
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:1 num:1 ^:nil
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes
* Arrays: Reversing a Series of Numbers

- *Problem:* Prompt the user to enter a series of numbers, then write
  the numbers in reverse order. Store the numbers in an array and use
  a preprocessing directive to set the size of the array. In the =main=
  function, initialize the array's elements to zero.

- *Input* and *Output*:
  #+begin_example
  Enter 10 numbers: 34 82 49 102 2 94 23 11 50 31
  In reverse order: 31 50 11 23 94 2 102 49 82 34
  #+end_example


* Solution

- Strategy:
  1) define size of array with =#define SIZE 10=
  2) declare and initialize array =int a= with zeros ={0}=
  3) first version of program: set =a= with fixed values
  4) to reverse the numbers, print them in reverse order using a =for=
     loop that counts down instead of up.

- For the code, let's remember to comment it and document it.

- Code version 1:
  #+begin_src C :tangle reverse1.c
    /*************************************************************/
    // reverse.c: reverse a series of numbers entered by the user
    // Store numbers as integer array with scanf in a for loop
    // Print numbers in reverse order with printf in a for loop
    // (C) Marcus Birkenkrahe Licence: GPLv3
    /*************************************************************/
    #include <stdio.h>

    // define size of array with `#define SIZE 10`
    #define SIZE 10

    // declare and init array `int a` with zeros `{0}`
    // first version of program: set `a` with fixed values
    int a[] = {34,82,49,102,2,94,23,11,50,31};
    // to reverse the numbers, print them in reverse order
    // using a `for` loop that counts down instead of up.
    for ( int i = 0 ; i < SIZE; i++) { // counting up
      printf("%d ", a[i]);
     }
    printf("\n"); // newline
    for ( int i = SIZE-1; i >= 0; i--) { // counting down
      printf("%d ", a[i]);
     }
  #+end_src

  #+RESULTS:
  : 34 82 49 102 2 94 23 11 50 31 
  : 31 50 11 23 94 2 102 49 82 34 

- Three ways to run this program:

  1) Run the code block with C-c C-c

  2) Tangle the code block into a source code file ~reverse.c~
     with C-c C-v t (this is the same as =org-bable-tangle=).

     Now run it inside this Org-mode file with a ~bash~ block:
     #+begin_src bash :results output
       ls -l reverse1.c  # long listing of the file
       gcc reverse1.c -o rev   # compile source to executable
       ./rev
     #+end_src

     #+RESULTS:
     : -rw-rw-r-- 1 marcus marcus 925 Sep  5 09:54 reverse1.c
     : 34 82 49 102 2 94 23 11 50 31 
     : 31 50 11 23 94 2 102 49 82 34 

  3) Tangle it and compile & run the file on the commandline
     outside of this file:

     - Open the shell INSIDE Emacs with =M-x shell=
     - On the shell, compile with =gcc= and run
     - You may have to go where the file is with =cd=

- Code version 2: Add user input
  1) Change source code file name to ~reverse2.c~
  2) Initialize array to zero
  3) Add a command to ask user for input
  4) Get user input with the =scanf= command
          
  #+begin_src C :tangle reverse2.c
    /*************************************************************/
    // reverse.c: reverse a series of numbers entered by the user
    // Store numbers as integer array with scanf in a for loop
    // Print numbers in reverse order with printf in a for loop
    // (C) Marcus Birkenkrahe Licence: GPLv3
    /*************************************************************/
    #include <stdio.h>
    #define SIZE 10

    int a[SIZE] = {0};

    // Ask user for input
    printf("Enter %d numbers:\n", SIZE);
    // Get user input from keyboard
    for ( int i = 0 ; i < SIZE; i++) { 
      scanf("%d", &a[i]); // scanf requires address-of &
      printf("%d ", a[i]);
     }
    puts("");  // another way to add a new line
    // To reverse the numbers, print them in reverse order
    // using a `for` loop that counts down instead of up.
    for ( int i = SIZE-1; i >= 0; i--) { // counting down
      printf("%d ", a[i]);
     }
    puts("");  // another way to add a new line
  #+end_src

- Test it with a shell code block:
  #+begin_src bash :results output
    gcc reverse2.c -o rev
    echo 34 82 49 102 2 94 23 11 50 31 | ./rev
  #+end_src

- Demo the pipe concept:
  #+begin_src bash :results output
    ls | wc -l  # list all files and count the number of lines
    echo hello | wc -c
  #+end_src


* Variable length arrays

Variable-Length Arrays (VLAs): The length of array is an input
variable and not known at compile-time but given at run-time.

- [X] Input operation (test with a shell block)
- [X] Declare and define VLA
- [ ] print VLA in reverse order

- Code:
  #+begin_src C :tangle mainVLA.c
    int i, n;

    printf("How many numbers do you want to reverse?");
    scanf("%d", &n);
    printf("\nOK, %d numbers.\n",n);

    int a[n]; // VLA definition - cannot be initialized

    for (i=0; i<n; i++) {
      scanf("%d", &a[i]);
      printf("%d ", a[i]);
     }

    puts("");
    for (i=n-1; i>=0; i--) {
      printf("%d ", a[i]);
     }
  #+end_src

  #+RESULTS:
  : How many numbers do you want to reverse?
  : OK, 5 numbers.
  : 1 0 1 0 -1622650816 

- Testing suite (shell code block) - need to tangle!
  #+begin_src bash :results output
    gcc mainVLA.c -o main
    echo 5 30 40 50 60 70 | ./main
  #+end_src 

  #+RESULTS:
  : How many numbers do you want to reverse?
  : OK, 5 numbers.
  : 30 40 50 60 70 
  : 70 60 50 40 30 


* Computing the length of an array

We can compute the length of an array =a= using the =sizeof= operator:

#+begin_src C 
  #define N 10
  #define SIZE (int)(sizeof(a)/sizeof(a[0]))

  int i, a[N];
  printf("SIZE = %d\n", SIZE);

  for (i=0; i<SIZE; i++) {
    a[i] = i*i;
    printf("%d ", a[i]);
   }
#+end_src

#+RESULTS:
: SIZE = 10
: 0 1 4 9 16 25 36 49 64 81 


* Parameter macros

Macros (like =#define=) can have parameters. Every macro has a keyword,
a name and a value or parameter.

- Example 1: =MAX= function.
  #+begin_src C

    #define MAX(x,y) ( (x) > (y) ? (x) : (y) )

    printf("Max value: %d\n", MAX(100,200));

  #+end_src

  #+RESULTS:
  : Max value: 200

- Here, "x > y ? x : y" is short version of:
  #+begin_example C
    if (x > y)
      x
    else
      y
  #+end_example

- Example 2: Function to determine if a number is even
  #+begin_src C

    #define IS_EVEN(n) ((n) % 2 == 0)

    printf("Is 99 even? Answer: %d\n", IS_EVEN(99));
  #+end_src  

  #+RESULTS:
  : Is 99 even? Answer: 0

- Example 3: Use macros to create aliases
  #+begin_src C

    #define PRINT_INT(n) printf("%d\n",n);

    int i = 200;
    PRINT_INT(i);

    int j = 0;
    PRINT_INT(i/j);

  #+end_src

  #+RESULTS:


* TODO Arrays: Checking a Number for Repeated Digits

- *Problem*: check if any of the digits in a number =n= appear more
  than once. After the user enters a number, the program prints
  either =Repeated digit=, or =No repeated digit=.

- *Sample input and output*:
  #+begin_example
  Enter a number: 28212
  Repeated digit.
  #+end_example
  
- *Algorithm:*

  1) Use array =digit_seen= to keep track of which digits in [0,9]
     were already seen. Initialize array to =false= because digits
     were seen yet.

     =digit_seen[4]= corresponds to digit 4 and holds the value
     =false= at the start or if it is not in =n=.

  2) Loop over the digits of =n= (using modulo 10). Leave the loop
     if =digit= has already been seen: =digit_seen[digit]=true=. Otherwise,
     set =digit_seen[digit]=true= (for the next loop iteration).

  3) If the loop was left then =n>0= and we have a =Repeated digit=,
     otherwise we have =No repeated digit.=

- Let's run through the loop sequence for =n = 282=

  #+begin_example
  1) n = 282 > 0 // enter the loop
       digit = 282 % 10 = 2 // remainder
       test: digit_seen[2] is FALSE
       set digit_seen[2] to TRUE
       next digit: 282 / 10 = 28.2
       (int) 28.2 = 28
       // back to start of the loop
  2) n = 28 > 0 // enter the loop
       digit = 28 % 10 = 8 // remainder
       test: digit_seen[8] is FALSE
       set digit_seen[8] to TRUE
       next digit: 28 / 10 = 2.8
       (int) 2.8 = 2
       // back to start of the loop
  3) n = 2 > 0 // enter the loop
       digit = 2 % 10 = 2
       test: digit_seen[2] is TRUE
       break loop

  Result: n = 2 > 0 -> "Repeated digit"

  If the last number had not been 2 or 8 but e.g. 1:
  4) n = 1 > 0 // enter loop
     digit = 1 % 10 = 1 (remainder)
     digit_seen[1] is FALSE
     set digit_seen[1] to TRUE
     next digit: 1 / 10 = 0.1
     (int) 0.1 = 0
     // back to start of the loop

  5) n = 0 // leave the loop

  Result: n = 0 -> no repeated digits
  #+end_example

- Code v1: Without user input - if we want to use Booleans, add
  =stdbool.h= 
  #+begin_src C :tangle repdigit.c :includes <stdbool.h> <stdio.h>
    /**********************************************************/
    // repdigit.c: checks integer for repeated digits
    // Input: integer with or without repeated digits
    // Output: Print "Repeated digit" or "No repeated digit"
    // Author: Marcus Birkenkrahe v1 without user input GPLv3
    /**********************************************************/
    // declare and initialize variables
    int digit, n = 282;
    bool digit_seen[10] = {false};

    // loop over the input digit n
    while (n > 0) {
      digit = n % 10;  // 282 % 10 = 2 (first digit)
      if (digit_seen[digit] == true) // digit has been seen already
        break;
      digit_seen[digit] = true; // digit has now been seen
      n /= 10; // (int) (282/10) = (int) (28.2) = 28 -> n
    }

    // print result
    if (n > 0) // loop was left 
      printf("Repeated digit.");
    else
      printf("No repeated digit.");
  #+end_src  

  #+RESULTS:
  : Repeated digit.

- If the dimension of =digit_seen= is not 10, and the number contains
  the missing index then you get "stack smashing error".

- Code v2: With user input and explicit =main= and =#include=
  #+begin_src C :tangle repdigit.c :main no :includes
    /**********************************************************/
    // repdigit.c: checks integer for repeated digits
    // Input: integer with or without repeated digits
    // Output: Print "Repeated digit" or "No repeated digit"
    // Author: Marcus Birkenkrahe v2 with user input GPLv3
    /**********************************************************/
    #include <stdio.h>
    #include <stdbool.h>

    int main(void)
    {
      // declare and initialize variables
      int n; // input
      int digit;
      bool digit_seen[10] = {false};

      // get user input
      printf("Enter an integer: ");
      scanf("%d", &n);
      printf("%d\n",n);

      // loop over the input digit n
      while (n > 0) {
        digit = n % 10;  // 282 % 10 = 2 (first digit)
        if (digit_seen[digit] == true) // digit has been seen already
          break;
        digit_seen[digit] = true; // digit has now been seen
        n /= 10; // (int) (282/10) = (int) (28.2) = 28 -> n
      }

      // print result
      if (n > 0) // loop was left 
        printf("Repeated digit.");
      else
        printf("No repeated digit.");

      return 0;
    }
  #+end_src  

- Testing on the shell:
  #+begin_src bash :results output
    ls -l repdigit.c # check if the file was tangled
    gcc repdigit.c -o rep
    echo 281 | ./rep
  #+end_src

  #+RESULTS:
  : -rw-rw-r-- 1 marcus marcus 1022 Sep 12 10:27 repdigit.c
  : Enter an integer: 281
  : No repeated digit.
  
  




