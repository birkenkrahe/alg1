#+TITLE: Functions
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 - Data structures with C++ - Lyon College, FA24
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:1 num:2 ^:nil
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes
* Overview

You should already know something about these derived data types:
arrays, pointers, functions. We review by coding and analyzing code.

In this section, we focus on functions. Functions are the main way to
modularize code. We review how to pass data to and retrieve data from
functions. New topics include recursion and the quicksort algorithm.

- *Objectives:*
  + Prototyping functions
  + Arguments, parameters, array parameters and VLA parameters
  + Compound literals to initialize arrays
  + Cast operators, lvalues and rvalues
  + Exiting from a function in the case of failure
  + Recursion principle and Fibonacci application
  + Quicksort algorithm explained and coded
  + Code along and solve different exercises
  + Review questions, glossary, and summary

*Code along:*

1. Open your Linux VM

2. Open Emacs (terminal or GUI)

3. Create an Org-mode file with =C-x C-f 3_functions.org=

4. Add =#+property= top header for C with ~:main yes :includes <stdio.h>
   :results output~

5. Cursor on the header: run it with =C-c C-c=

6. Create a C code chunk with =<s <TAB> C=

7. Write and run a "hello world" test program: =puts("hello world");=

8. Keep running chunks with =C-c C-=c= to check for syntax errors.

9. If any of these steps don't work for you, let me know!

10. To warm up, define an array =x= of 6 elements 1,3,2.5,3,4,3, print
    them in reverse order and print the number of times 3 occurs in =x=.
    #+begin_src C
      // declare and define floating-point array of 6 elements
      float x[6] = {1,3,2.5,3,4,3};
      // define counter and loop variable
      int count=0, i;
      // loop over array in reverse order
      for (i = 5; i>=0; i--) {
        printf("%g ",x[i]);
        // check if array element is equal to 3
        if (x[i]==3) count++;
       }
      // print result
      printf("\n%d", count);
    #+end_src

11. Would you know how to add functions =reverse= that reverse the array
    and =count= that do the counting? That'll be this week's homework!

* Function prototypes

- A function prototype is a declaration of the function with its
  return type and its typed parameters ahead of the =main= function.

- Once the function has a prototype, it can be defined anywhere in the
  program, even after the =main= program.

- Example: An adding function =add= - it takes two integers and returns
  their sum.

  1) Without prototype (note the change in the code block header):
     #+begin_src C :main no
       int add(int a, int b)
       {
         return a + b;
       }

       int main(void)
       {
         int x = 1, y = 1;
         printf("%d + %d = %d\n", x, y, add(x,y));
         return 0;
       }
     #+end_src

     #+RESULTS:
     : 1 + 1 = 2

  2) With prototype:
     #+name: add
     #+begin_src C :main no
       int add(int, int); // prototype

       int main(void)
       {
         int x = 1, y = 1;
         printf("%d + %d = %d\n", x, y, add(x,y));
         return 0;
       }

       int add(int a, int b)
       {
         return a + b;
       }

     #+end_src

     #+RESULTS:
     : 1 + 1 = 2

* Hello world as a (prototyped) function

- To reacquaint yourself with functions, turn the =hello world= program
  below into a program that prints =hello world= by calling a function
  =hello_world=. When successful, find different ways to break the code.

- The hello world program - a timeless, beautiful classic:
  #+begin_src C
    puts("Hello, world!");
    printf("Hello, world!");
  #+end_src

  #+RESULTS:
  : Hello, world!
  : Hello, world!

- Print "hello world" with a prototyped function =hello_world=:
  #+begin_src C :main no
    void hello_world(void); // prototype

    int main(void)
    {
      hello_world();  // no arguments, no return type
      return 0;
    }

    void hello_world(void)
    {
      puts("Hello, world!");
    }
  #+end_src

  #+RESULTS:
  : Hello, world!

- Break the function (non-trivially = no syntax errors):
  1. Define the function with ; at the end
  2. Try to =return= something from the =void= function
  3. Mismatch of defined function type with prototype
  4. Calling function with argument (instead of =void=)

  #+begin_src C :main no
    void hello_world(void); // prototype

    int main(void)
    {
      hello_world();  // no arguments, no return type
      return 0;
    }

    void hello_world(void)
    {
      puts("Hello, world!");
      return 1;
    }
  #+end_src

  #+RESULTS:

- Solution:
  1) No arguments need to be passed to the function (it's =void= of
     arguments) so it can be called as =hello_world(void)=.
  2) The function does not =return= any values so it can be defined as
     =void hello_world(void)=.
  3) The function does not change any of its =void= arguments so it
     could be labelled as =const= but since there are no arguments, this
     attribute is meaningless.
  4) The compiler uses a /prototype declaration/ to provide the compiler
     with a glimpse at a function whose full definition will come
     later. The prototype declaration resembles the function
     definition with =return= type, name, and parameter list.

     #+begin_src C :main no :includes
       #include <stdio.h> // I/O library

       void hello_world(void); // prototype declaration

       int main(void) // main function
       {
         hello_world(); // function call
         return 0;
       }

       void hello_world(void) // function definition
       {
         // print string
         printf("Hello, world!");
       }

     #+end_src

     #+RESULTS:
     : Hello, world!

  5) Break the function:
     1. Add =return 0;= to its definition and run the program.
     2. Change the prototype or the definition (but not both) =return=
        type to =int= and run the program.
     3. Change the prototype or the definition argument (but not both)
        from =void= to =int i=.
     4. Call the function with the argument ="hi"=.

* Function documentation

- Remember the required solution components. Functions should be
  accompanied by a short summary at the top:
  1) Name and purpose of the function
  2) Return type and parameters
  3) Anything noteworthy (edge cases, version dependencies etc.)

- Example: Hello world program
  #+begin_src C :main no
    #include <stdio.h>

    // Function: hello_world
    // Purpose: Prints "Hello, world!" to the console.
    // Returns: void (no return value)
    // Parameters: void (no parameters)
    void hello_world(void); // prototype

    int main(void)
    {
      hello_world(); // function call
      return 0;
    }

    void hello_world(void) // function definition
    {
      printf("Hello, world!");
    }
  #+end_src

  #+RESULTS:
  : Hello, world!

* Arguments vs. Parameters

- /Parameters/ appear in function /definitions/. They are dummy names that
  represent values to be supplied when the function is called.

- /Arguments/ are expressions that appear in function /calls/. In C, they
  are *passed by value*: when a function is called, each argument is
  evaluated and its value assigned to the corresponding parameter.

- Since the parameter contains a *copy* of the argument's value, changes
  made to the parameter during execution of the function don't affect
  the argument.

- Because arguments are passed by value, parameters can be modified
  without affecting the corresponding argument, and we need fewer
  variables.

  #+options: toc:nil num:nil ^:nil:
* Example: =power= function

- Example: a =power= function to raise =x= to the power of =n=
  #+begin_src C :results none :tangle power.c
    int power(int x, int n) {
      int i, result = 1;
      for (i = 1; i <= n; i++)
        result = result * x;
      return result;
    }

    int power(int x, int n) {
      int result = 1;
      while (n-- > 0)
        result = result * x;
      return result;
    }
    int main(void) {
      int a = 2, b = 3;
      printf("%d\n",power(a,b));
      return 0;
    }
  #+end_src

- Test result:
  #+begin_example
  : 2**3 = 8
  : 2**3 = 8
  #+end_example
- Solution template:
  #+begin_src C :main no
    // Function: power, power2
    // Purpose: Compute power of integer
    // Returns: n-th power of integer argument
    // Parameters: integer variable, integer power

    // Main program
    int main(void) {
      // ...
      return 0;
    }
    // Function definition (with loop variable i)

    // Function definition (without loop variable i)

  #+end_src

- Solution: Declare and test two power functions
  #+begin_src C :main no
    // Function: power, power2
    // Purpose: Compute power of integer
    // Returns: n-th power of integer argument
    // Parameters: integer variable, integer power
    int power(int,int);
    int power2(int,int);

    int main(void)
    {
      int x = 2, n = 3;
      printf("%d**%d = %d\n", x, n, power(x,n));
      printf("%d**%d = %d\n", x, n, power2(x,n));
      return 0;
    }

    int power(int x, int n)
    {
      int i, result = 1;
      for (i=1;i<=n;i++)
        result*=x;
      return result;
    }

    int power2(int x, int n)
    {
      int result = 1;
      while (n-- > 0)
        result*=x;
      return result;
    }

  #+end_src

  #+RESULTS:
  : 2**3 = 8
  : 2**3 = 8

* Example: =decompose= function

- Passing arguments by value makes it difficult to write functions
  that produce two different results because only one number can be
  returned.

- Example: The function =decompose= splits its argument in an integer
  and a fractional part.

  #+begin_src C :main no
    // Function: decompose
    // Purpose: Splits argument x in integer and fractional part
    // Returns: nothing
    // Parameters: float x, integer part, float fractional part
    // Uses: casting function
    void decompose (float, int, float);

    int main(void) {
      int i = 0;
      float d = 0.;
      float x = 3.14159;
      decompose(x, i, d);
      printf("x: %g, i: %d, d: %g\n", x, i, d);
      return 0;
    }

    void decompose (float x, int int_part, float frac_part)
    {
      int_part = (int) x; // cast x as integer, drops fractional part
      frac_part = x - int_part; // fractional part
    }

  #+end_src

  #+RESULTS:
  : x: 3.14159, i: 0, d: 0

- When the function is called, =3.14159= is copied into =x=, the value of
  =i= is copied into =int_part= and the value of =d= is copied into
  =frac_part=. But when the function returns, =i= and =d= are unchanged.

- Do you remember how to fix this?
  #+begin_src C :main no
    void decompose (float, int *, float *); // pass pointers

    int main(void) {
      int i = 0;
      float d = 0.;
      float x = 3.14159;
      decompose(x, &i, &d); // pass value, and references
      printf("x: %g, i: %d, d: %g\n", x, i, d);
      return 0;
    }

    void decompose (float x, int *int_part, float *frac_part)
    {
      (*int_part) = (int) x; // cast x as int integer, drops fractional part
      (*frac_part) = x - *int_part; // fractional part
    }
  #+end_src

  #+RESULTS:
  : x: 3.14159, i: 3, d: 0.14159

  The variables =i= and =d= are now passed as references, and the
  parameters catch them as typed /pointer/ variables that point at the
  memory locations of =i= and =d= - when the value the pointers point to,
  =*int_part= and =*frac_part= are changed the original variables are
  changed, too. We'll review pointers next!

- /Note:/ In the code block, I wrote =(*int)= because Org-mode gets
  confused with =*= at the start of a line (expects bullet points).

* Practice: add two integers - pass by reference

- Here is another version of the function to add two integer values:
  #+begin_src C :main no
    // Function: add
    // Purpose: Adds two integer values
    // Returns: sum a + b
    // Parameters: int a, int b (passed by value)
    int add(int, int);

    // main program
    int main(void)
    {
      int x = 1, y = 1;
      printf("%d + %d = %d\n", x, y, add(x,y));
      return 0;
    }

    // function definition
    int add(int a, int b)
    {
      return a + b;
    }

  #+end_src

  #+RESULTS:
  : 1 + 1 = 2

- The function call passes arguments =x= and =y= by value. Create a new
  =void= function =add2= that passes the integers by reference using
  pointers, print the =sum= inside the function, and set the original
  arguments to 0.

- Test output:
  #+begin_example
  : x = 1, y = 1
  : 1 + 1 = 2
  : x = 0, y = 0
  #+end_example

- Solution template:
  #+begin_src C :main no
    // Function: add
    // Purpose: Adds two integer values
    // Returns: Nothing
    // Parameters: int *a, int *b (passed by reference)

    // Main program

    // Function definition

  #+end_src

- Solution:
  #+begin_src C :main no
    // Function: add
    // Purpose: Adds two integer values
    // Returns: Nothing
    // Parameters: int *a, int *b (passed by reference)
    void add2(int*,int*);

    // main program
    int main(void)
    {
      // define variables
      int x = 1, y = 1;
      // print original values
      printf("x = %d, y = %d\n", x, y);
      // call function (pass by reference)
      add2(&x,&y);
      // print modified values
      printf("x = %d, y = %d\n", x, y);
      return 0;
    }

    // function definition
    void add2(int *a, int *b)
    {
      int sum = *a + *b;
      printf("%d + %d = %d\n", *a, *b, sum);
      // modify a an b
      (*a) = 0;
      (*b) = 0;
    }
  #+end_src

  #+RESULTS:
  : x = 1, y = 1
  : 1 + 1 = 2
  : x = 0, y = 0

* Bonus assignment: Say hello by reference

- *Programming assignment (bonus):* modify a simple 'hello world' program from
  pass-by-value to pass-by-reference and modify the original character.
  #+begin_src C
    // Function: say_hello
    // Purpose: Prints "Hello, <char>!" message
    // Returns: nothing
    // Parameters: char c (passed by value)
    void say_hello(char);

    int main(void) {
      char initial = 'W';

      say_hello(initial); // Passing by value
      printf("After function call: initial = %c\n", initial); // 'W' remains unchanged

      return 0;
    }

    void say_hello(char c) {
      printf("Hello, %c!\n", c);
    }
  #+end_src

  #+RESULTS:
  : Hello, W!
  : After function call: initial = W

* Example: 1d Array Arguments

*This is the concept that you need to complete the next mandatory
programming assignment.*

- When given an array ~a~ of =int= values, ~sum_array~ returns the sum of
  the elements in ~a~. The length of ~a~ is supplied as a second argument:
  #+name: sum_array
  #+begin_src C :main no
    // Function: sum_array
    // Purpose: Returns the sum of an integer array
    // Parameters: int a[], int n (array and its length)
    int sum_array(int[],int);

    // main function
    int main() {

      int a[5]={1,1,1,1,1};

      printf("Sum of array of %d elements: %d\n",
             5, sum_array(a,5)); // no [] brackets when passing the array
      return 0;
    }

    // function definition
    int sum_array(int a[], int n) { // brackets after the parameter
      int i, sum = 0;
      for (i = 0; i < n; i++)
        sum += a[i];
      return sum;
    }
  #+end_src

  #+begin_src C  :main no
    int sum_array(int [], int);
    int main(void) {
      int a[5]={1,1,1,1,1};
      printf("Sum of array of %d elements: %d\n",
             5, sum_array(a,5)); // call function on array a of length n
      return 0;
    }
    int sum_array(int a[], int n)
    {
      int i, sum=0;
      for (i=0; i < n; i++)
        sum += a[i];
      return sum;
    }

  #+end_src

  #+RESULTS:
  : Sum of array of 5 elements: 5

- A function has no way to check that we've passed it the correct
  array length (so you must be careful - easy to cause memory leaks).

* Practice: Passing array arguments and printing them

- Objective: Write a function ~print_array~ that takes an integer array
  and its length as arguments and prints the elements of the array.
  1. Implement the ~print_array~ function that takes an array and its
     length.
  2. Use a loop to print each element of the array inside the
     function.

- Sample output: For the array ~{1, 2, 3, 4, 5}~, the output will be:
  #+begin_example
: Element 0: 1
: Element 1: 2
: Element 2: 3
: Element 3: 4
: Element 4: 5
  #+end_example

- Solution:
  #+begin_src C :main no
    // Function: sum_array
    // Purpose: Returns the sum of an integer array
    // Parameters: int a[], int n (array and its length)
    void print_array(int [], int);

    int main(void)
    {
      int a[5]={1,2,3,4,5};
      print_array(a,5);
      return 0;
    }

    void print_array(int a[], int n)
    {
      for (int i = 0; i < n; i++)
        printf("Element %d: %d\n", i, a[i]);
    }

  #+end_src

  #+RESULTS:
  : Element 0: 1
  : Element 1: 2
  : Element 2: 3
  : Element 3: 4
  : Element 4: 5

* Example: Two-dimensional Array Arguments

- Let's build on the one-dimensional array for higher dimensions
  1. Summing elements of a two-dimensional array
  2. Printing the array like a matrix
  3. Reducing the parameter list

- For multi-dimensional arrays, only the length of the first dimension
  may be omitted when declaring the parameter:
  #+name: sum2
  #+begin_src C :main no
    #define LEN 2

    int sum2(int [][LEN], int);
    void print_array(int [][LEN], int);

    // main program
    int main()
    {
      int a[][LEN]={1,0,0,1};
      print_array(a,LEN);
      printf("\nSum of 2d array: %d\n", sum2(a,LEN));
      return 0;
    }

    // summation
    int sum2(int a[][LEN], int n)
    {
      int i, j, sum = 0;
      for (i=0; i<n;i++) // rows
        for (j=0;j<LEN;j++) // cols
          sum+=a[i][j]; // summation
      return sum;
    }

    // printing
    void print_array(int a[][LEN],int n)
    {
      for (int i=0;i<n;i++) {
        for (int j=0;j<n;j++) {
          printf("%d ", a[i][j]);
        }
      }
    }
  #+end_src

  #+RESULTS: sum2
  : 1 0 0 1
  : Sum of 2d array: 2

- How can the 2d array be printed in matrix format?
  #+begin_src C :main no
    int main()
    {
      int a[2][2]={1,0,0,1};
      for (int i=0;i<2;i++) {
        if (i!=0) puts(" ");
        for (int j=0;j<2;j++) {
          printf("%d ", a[i][j]);
        }
      }
      return 0;
    }
  #+end_src

  #+RESULTS:
  : 1 0
  : 0 1

- Since we know the dimensions, can we omit the second parameter?
  #+begin_src C :main no
    #define LEN 4

    int sum2(int [][LEN]);
    void print_array(int [][LEN]);

    int main()
    {
      int a[LEN][LEN]={0};
      print_array(a);
      printf("\nSum of 2d array: %d\n", sum2(a));
      return 0;
    }

    int sum2(int a[][LEN])
    {
      int i, j, sum = 0;
      for (i=0; i<LEN;i++) {// rows
        for (j=0;j<LEN;j++) {// cols
          sum+=a[i][j]; // summation
        }
      }
      return sum;
    }

    void print_array(int a[][LEN])
    {
      for (int i=0;i<LEN;i++) {
        if(i!=0) puts(" ");
        for (int j=0;j<LEN;j++) {
          printf("%d ", a[i][j]);
        }
      }
    }

  #+end_src

  #+RESULTS:
  : 0 0 0 0  
  : 0 0 0 0  
  : 0 0 0 0  
  : 0 0 0 0 
  : Sum of 2d array: 0

* Practice: Create And Print 2d Arrays

- *Problem:*
  1. Declare a matrix of dimensions 4 x 3.
  2. Use =#define= to define the matrix dimensions =ROWS= and =COLS=
  3. Define a variable =length= to hold the total length of the array
  4. Initialize it using the =void= function =init_2d= to the following
     values: =m[i][j] = i*j= for all i,j.
     #+begin_example
     : 0 1
     : 1 2
     : 2 3
     #+end_example

- Solution:
  #+begin_src C :main no
    #define ROWS 3
    #define COLS 2

    void init_2d(int [ROWS][COLS]);
    void print_array(int [ROWS][COLS]);

    int main(void)
    {
      int matrix[ROWS][COLS] = {0};
      init_2d(matrix);
      print_array(matrix);
      return 0;
    }

    void init_2d(int m[][COLS])
    {
      for (int i=0; i<ROWS; i++) {
        for (int j=0; j<COLS; j++) {
          m[i][j]=i+j;
        }
      }
    }

    void print_array(int a[ROWS][COLS])
    {
      for (int i=0;i<ROWS;i++) {
        if(i!=0) puts(" ");
        for (int j=0;j<COLS;j++) {
          printf("%d ", a[i][j]);
        }
      }
    }
  #+end_src

  #+RESULTS:
  : 0 1
  : 1 2
  : 2 3

* Bonus assignment: Print 2 dimensional array-by-reference

- *Homework assignment (bonus):* Modify the function =print_array= seen in
  class to print a 2-dimensional array.

* Glossary

| Term/Command            | Explanation                                                     |
|-------------------------|-----------------------------------------------------------------|
| =hello_world=           | Function to print "hello world"                                 |
| =void=                  | Keyword indicating no arguments or no return value              |
| =return=                | Statement to exit a function, optionally returning a value      |
| =const=                 | Keyword indicating the value is constant                        |
| /prototype declaration/ | Declaration providing a preview of a function                   |
| =int=                   | Keyword to define an integer type                               |
| =double=                | Keyword to define a double-precision floating-point type        |
| /parameters/            | Dummy names representing values in function definitions         |
| /arguments/             | Expressions passed to functions in calls                        |
| =power=                 | Function to raise a number to a power                           |
| =decompose=             | Function to split a double into integer and fractional parts    |
| =sum_array=             | Function to sum elements of an integer array                    |
| =puts=                  | Function to write a string to stdout                            |
| =#define=               | Preprocessor directive to define a macro                        |
| =* (dereference)=       | Operator to access the value at a pointer address               |
| =& (address-of)=        | Operator to get the address of a variable                       |
| =printf=                | Standard library function to print formatted output             |
| =scanf=                 | Standard library function to read formatted input               |
| =main=                  | Main function, entry point of a C program                       |
| =while=                 | Loop statement to execute code as long as a condition is true   |
| =for=                   | Loop statement to execute code a fixed number of times          |

* Summary

1. Functions are prototyped to provide the compiler with information
   about the function's return type, name, and parameters before its
   definition.
2. Parameters in function definitions are placeholders for values to
   be supplied when the function is called.
3. Arguments in function calls are passed by value, meaning the
   function operates on copies of the values, not the original
   variables.
4. Breaking a function can be done by modifying its return type,
   changing its parameters, or altering its definition inconsistently
   with its prototype.

