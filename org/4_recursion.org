#+TITLE: Recursion
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 - Data structures with C++ - Lyon College, FA24
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:1 num:2 ^:nil
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> :results output :exports both :noweb yes
* Overview

- *Objectives:*
  + Compound literals to initialize arrays
  + Cast operators, lvalues and rvalues
  + Exiting from a function in the case of failure
  + Recursion principle with applications
  + Quicksort algorithm explained and coded
  + Code along and solve different exercises
  + Review questions, glossary, and summary

* Variable-Length Array Parameters

- Variable-length arrays allow to state the length of an array in a
  function argument. They are most useful for multidimensional arrays.

- In this function definition, there is no direct link between ~n~ and
  the length of the array ~a~. The array could in fact be larger or
  smaller than =n=, and then the function would not work (if =n= was used
  to access elements of =a=).
  #+begin_src C :results none
    int sum_array(int a[], int n) {
      // ...
    }
  #+end_src

- The array could be shorter or longer than =n= (and the function might
  break and lead to a "stack smashing" error because of an out of
  bounds array access:
  #+begin_src C :results none
    void foo(int a[], int n)
    {
      a[n]=0;
    }
    int main(void)
    {
      int a[2]={0};
      foo(a,2);
      return 0;
    }
  #+end_src

- Using a variable-length array parameter, we can explicitly state that
  the length of ~a~ is ~n~:
  #+begin_src C :results none
    int sum_array(int n, int a[]) {
      // ...
    }
  #+end_src

- But now the order of parameters is important: ~int n, int a[n]~ is OK,
  but ~int a[n], int n~ is illegal.

- *Practice:* Sum an array of length 10 without VLA (=sum_array=), and
  with VLA (=sum_array_vla=) then call the function with the values
  5,10,11 for n.
  #+begin_src C :main no :tangle vla.c
    int sum_array_vla(int n, int a[n]); // Variable-Length Array
    int sum_array(int a[], int n); // regular array

    int main(void)
    {
      int a[10]={[0 ... 9]=1}; // another way of initializing arrays
      printf("vla: %d\n", sum_array_vla(10,a));
      printf("regular: %d ", sum_array(a,11));
      return 0;
    }

    int sum_array_vla(int n, int a[n])
    {
      int i, sum=0;
      for (i=0;i<n;i++)
        sum+=a[i];
      return sum;
    }

    int sum_array(int a[], int n)
    {
      int i, sum=0;
      for (i=0;i<n;i++)
        sum+=a[i];
      return sum;
    }
  #+end_src

  #+RESULTS:
  : vla: 10
  : regular: 897987594

- What did you find out?
  #+begin_quote
  The VLA generates a warning for n>10.
  #+end_quote

- Earlier, we summed the elements in a 2D array. The function [[sum2]] was
  limited to arrays with a fixed number of columns. With a VLA
  parameter, we can generalize the function to any number of columns:
  #+begin_src C :main no
    int sum_two_dimensional_array(int n, int m, int a[n][m]);

    int main(void)
    {
      int n = 4, m = 4, i, j;
      int a[n][m];
      for(i=0;i<n;i++) {
        for(j=0;j<m;j++) {
          a[i][j]=i+j;
          printf("%d ",a[i][j]);
        }
        printf("\n");
      }
      printf("Sum: %d\n", sum_two_dimensional_array(n, m, a));

      return 0;
    }

    int sum_two_dimensional_array(int n, int m, int a[n][m])
    {
      int i,j,sum=0;
      for(i=0;i<n;i++)
        for(j=0;j<m;j++)
          sum+=a[i][j];
      return sum;
    }
  #+end_src

  #+RESULTS:
  : 0 1 2 3
  : 1 2 3 4
  : 2 3 4 5
  : 3 4 5 6
  : Sum: 48

- Using keyboard input:
  #+name: sum_two_dimensional_array
  #+begin_src C :main no :tangle vlaSum.c :results none :flags -Wall -Wextra
    int sum_two_dimensional_array(int n, int m, int a[n][m]);

    int main(void)
    {
      int n, m, i, j; // n x m array, loop variables i, j

      printf("Enter number of rows and columns: ");
      scanf("%d %d", &n, &m);
      printf("%d %d", n, m);

      int a[n][m];
      puts("");

      for(i=0;i<n;i++) {
        for(j=0;j<m;j++) {
          a[i][j]=i+j;
          printf("%d ",a[i][j]);
        }
        printf("\n");
      }
      printf("Sum: %d\n", sum_two_dimensional_array(n, m, a));

      return 0;
    }

    int sum_two_dimensional_array(int n, int m, int a[n][m])
    {
      int i,j,sum=0;
      for(i=0;i<n;i++)
        for(j=0;j<m;j++)
          sum+=a[i][j];
      return sum;
    }
  #+end_src

- Testing:
  #+begin_src bash :results output
    gcc vlaSum.c -o vla
    echo 4 4 | ./vla
  #+end_src

  #+RESULTS:
  : Enter number of rows and columns: 4 4
  : 0 1 2 3
  : 1 2 3 4
  : 2 3 4 5
  : 3 4 5 6
  : Sum: 48

- Note: My first attempt at [[sum_two_dimensional_array]] failed with a
  "segmentation fault". The problem was that the array =a[n][m]= can
  only be declared *after* the user input =scanf= statement! To find
  issues like these, use additional compiler flags:
  #+attr_html: :width 600px:
  [[../img/compiler_flags.png]]

- These are all alternative ways to declare a VLA: the first one is to
  be preferred because it suggests the VLA, and also because the
  parameter list =int a[n], int n= is illegal (=n= is not known yet).
  #+begin_src C
    int func1(int n, int a[n]);
    int func2(int, int []);
    int func1(int n, int a[*]);
    int func1(int, int [*]);
  #+end_src

- VLA parameters can also be expressions to be evaluated, for example
  in this function where two arrays =a= and =b= are concatenated by
  copying them successively into an array =c=:
  #+begin_src C
    int concat(int m, int n, int a[m], int b[n], int c[m+n]);
  #+end_src

* Compound Literals

- The term 'literal' always refers to unchangeable language elements,
  and the term 'compound' means that keywords are combined, like in
  =i++=, the compound operator representing =i = i + 1=.

- When summing an array's elements in [[sum_array]], the array needs to be
  declared and initialized. Using a /compound literal/, this can be
  avoided:
  #+name: sum_array2
  #+begin_src C :main no
    // prototype declaration
    int sum_array2(int n, int a[n]);

    // main function
    int main()
    {
      printf("total = %d\n",
         sum_array2(5, (int []){3,0,3,4,1}));
      return 0;
    }

    // function definition
    int sum_array2(int n, int a[n])
    {
      int i, sum = 0;
      for (i=0;i<n;i++)
        sum += a[i];
      return sum;
    }

  #+end_src

  #+RESULTS: sum_array2
  : total = 11

- A compound literal resembles a cast =(int[])= applied to an
  initializer ={}=. It is also an /lvalue/, so the value of its elements
  can be changed. It can be made read-only by adding =const= before the
  type.

- An /lvalue/ (locator value) is an expression that points to a location
  in memory (that is it has an address):
  #+begin_src C :results none
    int x = 10; // x is an lvalue on the left of =
    x = x + 1; // x is an lvalue on the left and the right of =
  #+end_src

- An /rvalue/ (right-hand value) can only appear on the right of an
  assignment: It is a temporary value without a usable address.
  #+begin_src C :results none
    int y = 10 + 5; // `10 + 5` is an rvalue

    #define PI 3.14
    int x = PI; // PI is an rvalue because you cannot assign a value to it
    //PI = 3.15;
  #+end_src

- A /cast/ is an operator that converts one type into another:
  #+begin_src C
    int i = 1; // an integer
    float x = 3.14; // a floating-point variable
    char c = 'a'; // a character variable
    char *ic = "22"; // a character pointer variable

    printf("%f\n", (float)(i)); // cast int to float (widening)
    printf("%d\n", (int)(x)); // cast float to int (narrowing/truncates)
    printf("%c\n",c); // no cast
    printf("%d\n",(int)(c)); // cast char to int
    printf("%i\n", atoi(ic)); // cast string (char pointer) to int
  #+end_src

  #+RESULTS:
  : 1.000000
  : 3
  : a
  : 97
  : 22

- =atoi= (ASCII to Integer) is a function from the C Standard Library
  (=stdlib.h=) that converts a numeric string into an integer value. The
  syntax looks like this:
  #+begin_example C
    int atoi(const char *str)
  #+end_example
  The argument is a constant pointer to a string. We'll learn more
  about strings later.

- An /lvalue/ or /locator value/ is an expression that represents a memory
  location, and that can appear on the left hand side of an assignment
  operator. As an object it persists beyond a single expression and
  can have a value assigned to it.

  By contrast, an /rvalue/ or /right value/ represents a data value stored
  in memory but that is not an assignable object itself.

  For example:
  #+begin_src C
    int x = 10;   // 'x' is an lvalue, '10' is an rvalue
    int *p = &x;  // 'p' is an lvalue, '&x' is an rvalue

    (*p) = 20;      // '*p' is an lvalue, '20' is an rvalue
    x = x + 5;    // 'x' is an lvalue, 'x + 5' is an rvalue
  #+end_src

- Are functions and operators the same thing, for example the
  functions =stdlib::atoi=, =stdio::printf= vs. the operators =sizeof= and
  =(int)=?
  #+begin_quote
  An operator is compiled to a sequence of instructions by the
  compiler. But if the code calls a function, it has to jump to a
  separate piece of code.
  #+end_quote

* The =return= statement

- Understanding =return= is fundamental when working with functions,
  especially since data structures often involve returning values
  or pointers from functions. Knowing how =return= works with
  different data types and conditions is essential.

- Functions are the most important building blocks of C
  programs. Using functions, we can divide a program into smaller
  parts that are easier to maintain and to understand.

- =return= statements may appear in functions whose return type is =void=
  as long as no expression is given:
  #+begin_src C :main no
    void print(int i)
    {
      if (i<0)
        return;
      printf("%d",i);
    }

    int main()
    {
      print(1); // prints 1
      print(-1); // prints nothing, return without calling printf
      return 0;
    }
  #+end_src

  #+RESULTS:
  : 1

* The =exit= Function

- While not directly related to data structures, knowing how to handle
  program termination and error reporting will be useful in debugging
  and testing data structure implementations. It can be part of error
  handling strategies when working with complex data structures.

- The argument passed to =stdlib::exit= indicates the status at
  termination: =exit(0)= is normal termination =exit(1)= is failure, but
  you can use =exit(EXIT_SUCCESS)= or =exit(EXIT_FAILURE)=, two macros
  defined in =stdlib.h=.

- Exercise: define success as ~SUCCESS~ and failure as ~FAILURE~ and
  demonstrate their use with =exit= in a short program by comparing two
  numbers which you input via standard input.

- Before you start, add =<stdlib.h>= to your =PROPERTY= line at the top,
  and run the line again with =C-c C-c=.

- Input file
  #+begin_src bash :results output :exports both
    echo 100 200 > input
    cat input
  #+end_src

- Example code:  
  #+begin_src C :cmdline < input :main no
    #define FAILURE EXIT_FAILURE
    #define SUCCESS EXIT_SUCCESS

    int main() {
      // scan an integer
      int i,j;
      scanf("%d%d", &i, &j);
      // print 0 or 1 depending on input values
      printf("%d", i > j ? SUCCESS : FAILURE);
      return 0;
    }
  #+end_src

- The expression in the =printf= argument resolves to:
  #+begin_example C
  if (i > j)
  {
    EXIT_SUCCESS; // return 0 for success and exit
  } else {
    EXIT_FAILURE  // return 1 for failure and exit
  }
  #+end_example

- Perhaps confusingly, =0= counts as success ("nothing out of the
  ordinary"), while =1= counts as failure ("something's the matter").

* Recursion

- Recursion is crucial for implementing and understanding many data
  structures, such as linked lists, trees, and graphs. It's especially
  important in algorithms like tree traversals, divide-and-conquer
  strategies (e.g., Quicksort), and backtracking.

- Recursion is a powerful principle that allows something to be
  defined in terms of smaller instances of itself.

- Recursion is a recurring principle in nature: think of the leaf of a
  fern - each sprig is a copy of the overall leaf.
  #+attr_html: :width 400px:
  [[../img/fern.jpg]]

- Another example is a snowflake (we'll get back to snowflakes when we
  introduce hash tables).
  #+attr_html: :width 400px:
  [[../img/snowflake.jpg]]

- In math and computing, a function is /recursive/ if it calls
  itself. Each successive call works on a more refined set of inputs,
  bringin us closer to the solution of a problem.

- *Examples:* Factorial (permutations, e.g. there are 3!=6 ways to
  arrange 3 objects), and power.

  1) n! = n \times (n-1)!
     
  2) x^{n} = x \times x^{n-1}

- Algorithmic applications of recursion include tree traversals, graph
  searches, and sorting.

- Example: computing the factorial n! = n \times (n-1) \times ... \times 1
  #+begin_src C :main no :tangle fact.c
    int factorial(int n)
    {
      if (n<=1)
        return 1; // abort
      else
        return n * factorial(n-1);
      // return n <= 1 ? 1 : n * factorial(n-1);
    }
    int main()
    {
      int n = 3;
      printf("The factorial of n = %d is %d\n", n, factorial(n));
      return 0;
    }
  #+end_src

  #+RESULTS:
  : The factorial of n = 3 is 6

- What happens for i = fact(3):
  #+begin_example
  call fact(3): 3 > 1
       call fact(2): 2 > 1
            call fact(1): 1 = 1 return 1
       return 2 * 1
  return 3 * 2 * 1 = 6
  #+end_example

- The first part of the recursive process is the "winding phase",
  ended by the "terminating condition". The second part is the
  "unwinding phase".

- *Exercise:* compute x^{n} using the formula x^{n} = x \times x^{n-1}.

  For example for x = 2, n = 3: 2^{3} = 2 \times 2^{3-1} = 2 \times 2^{2} = 2 \times (2 \times
  2^{2-1}) = 2 \times 2 \times 2 = 8

- You can use the following template to generate the sample output:
  #+begin_example
    5^2 = 25
  #+end_example
  
- Template: Supplement the print and the recursion statements  
  #+begin_src C :main no
    int power(int x, int n); // function declaration

    int main()  // main program
    {
      int x = 5; // number to be raised
      int n = 2; // power factor
      // print result

      return 0;
    }

    int power(int x, int n)
    {
      // if n = 0 return 1 and abort

      // otherwise compute x recursively

    }
  #+end_src

  #+RESULTS:
  
- Solution:
  #+begin_src C :main no :tangle power.c
    int power(int x, int n); // function declaration

    int main()  // main program
    {
      int x = 5; // number to be raised
      int n = 2; // power factor
      printf("%d^%d = %d\n", x, n, power(x,n));
      return 0;
    }

    int power(int x, int n)
    {
      if (n == 0)
        {
          return 1;
        }
      else
        {
          return  x * power(x,n-1);
        }
    }
  #+end_src

  #+RESULTS:
  : 5^2 = 25

- What happens for x = 5, n = 3?
  #+begin_example
    call power(5,3) : 3 != 0
         call power(5,2) : 2 != 0
              call power(5,1) : 1 != 0
                   call power(5,0) : 0 == 0 return 1
              return 5 * 1 = 5
         return 5 * 5 = 25
    return 5 * 25 = 125
  #+end_example

- Here is the short version of both functions:

  #+begin_src C :main no :tangle fact.c
    int factorial(int n)
    {
      return n <= 1 ? 1 : n * factorial(n-1);
    }
    int main()
    {
      int n = 5;
      printf("The factorial of n = %d is %d\n", n, factorial(n));
      return 0;
    }
  #+end_src

  #+RESULTS:
  : The factorial of n = 5 is 120

  #+begin_src C :main no :tangle power.c
    int power(int x, int n); // function declaration

    int main()  // main program
    {
      int x = 5; // number to be raised
      int n = 3; // power factor
      printf("%d^%d = %d\n", x, n, power(x,n));
      return 0;
    }

    int power(int x, int n)
    {
      return n == 0 ? 1 : x * power(x,n-1);
    }
  #+end_src

  #+RESULTS:
  : 5^3 = 125

* NEXT The Quicksort Algorithms explained
#+attr_html: :width 600px:
[[../img/quicksort.png]]

- Recursion arises naturally in divide-and-conquer algorithms, in
  which a large problem is divided into smaller pieces that are then
  tackled by the same algorithm.

- [[https://lamfo-unb.github.io/img/Sorting-algorithms/Quicksort.gif][See this Gif animation for an illustration of the algorithm.]]

- Learning Quicksort introduces divide-and-conquer techniques, which
  are central to many data structure algorithms. It also provides
  insights into recursion and optimization techniques, like choosing a
  good pivot or handling small arrays differently.
  
- The purpose of Quicksort is to sort the elements of an array indexed
  from 1..n

  1. Choose a *partitioning* element, then arrange array so that
     elements 1...i-1 <= e <= i+1...n

  2. Sort elements 1...i-1 by using Quicksort recursively

  3. Sort elements i+1...n by using Quicksort recursively

- The first step of partitioning is critical to the method
  working. This algorithm is not particularly effective but easy to
  understand:

  1) To markers /low/ and /high/ keep track of array positions.

  2) Initially, /low/ points to the head, and /high/ to the tail.

  3) Copy the first element /e/ into a temporary location.

  4) Move /high/ across array from right to left until it points to an
     element that's smaller than /e/.

  5) Copy that element into the hole left of /e/ (that /low/ points to).

  6) Move /low/ from left to right looking for an element that's larger
     than /e/.

  7) Copy that element into the hole that /high/ points to.

  8) Continue process alternating /high/ and /low/ until they meet.

  9) Copy e into the hole that both /low/ and /high/ point at.

- Illustration with an array of seven integers:

  1. /low/ points to the first, /high/ to the last element.
     |-----+---+---+----+---+----+------|
     |  12 | 3 | 6 | 18 | 7 | 15 |   10 |
     |-----+---+---+----+---+----+------|
     | /low/ |   |   |    |   |    | /high/ |
     |-----+---+---+----+---+----+------|

  2. Copy /e/ = 12 elsewhere
     |-----+---+---+----+---+----+------|
     |     | 3 | 6 | 18 | 7 | 15 |   10 |
     |-----+---+---+----+---+----+------|
     | /low/ |   |   |    |   |    | /high/ |
     |-----+---+---+----+---+----+------|

  3. Compare /high/ element to e = 12. Since 10 < 12 it's on the wrong
     side of the array and is moved to the hole.
     |----+-----+---+----+---+----+------|
     | 10 |   3 | 6 | 18 | 7 | 15 |      |
     |----+-----+---+----+---+----+------|
     |    | /low/ |   |    |   |    | /high/ |
     |----+-----+---+----+---+----+------|

  4. /low/ points to 3 < 12, then 6 < 12, then 18 > 12, which is on the
     wrong side of the array: it is moved to the hole and /high/ is
     shifted to the left now.
     |----+---+-----+----+---+----+------|
     | 10 | 3 |   6 | 18 | 7 | 15 |      |
     |----+---+-----+----+---+----+------|
     |    |   | /low/ |    |   |    | /high/ |
     |----+---+-----+----+---+----+------|

     |----+---+---+-----+---+----+------|
     | 10 | 3 | 6 |  18 | 7 | 15 |      |
     |----+---+---+-----+---+----+------|
     |    |   |   | /low/ |   |    | /high/ |
     |----+---+---+-----+---+----+------|

     |----+---+---+-----+---+------+----|
     | 10 | 3 | 6 |     | 7 |   15 | 18 |
     |----+---+---+-----+---+------+----|
     |    |   |   | /low/ |   | /high/ |    |
     |----+---+---+-----+---+------+----|

  5. /high/ points to 15 > 12 (can stay), then to 7 < 12 which needs to
     be moved to the hole, then /low/ and /high/ point to the same hole,
     and /e/ = 12 is moved there:

     |----+---+---+-----+------+----+----|
     | 10 | 3 | 6 |     |    7 | 15 | 18 |
     |----+---+---+-----+------+----+----|
     |    |   |   | /low/ | /high/ |    |    |
     |----+---+---+-----+------+----+----|

     |----+---+---+---+----------+----+----|
     | 10 | 3 | 6 | 7 |          | 15 | 18 |
     |----+---+---+---+----------+----+----|
     |    |   |   |   | /low/ /high/ |    |    |
     |----+---+---+---+----------+----+----|

     |----+---+---+---+----+----+----|
     | 10 | 3 | 6 | 7 | *12* | 15 | 18 |
     |----+---+---+---+----+----+----|
     |    |   |   |   |    |    |    |
     |----+---+---+---+----+----+----|

  6. We've completed our objective for the first sorting process: all
     elements to the left of /e/ are less or equal than 12, all elements
     on the right are greater or equal than 12.

  7. Now we apply Quicksort recursively to sort the first (10,3,6,7)
     and the last partition (15,18).

* Quicksort Algorithm coded
** Problem

Use Quicksort to sort an array of integers.

** Input

Array {9,16,47,82,4,66,12,3,25,51}

** Output

Sorted array {3,4,9,12,16,25,47,51,66,82}.

** Code

The split is performed with a function ~split~, the sorting with a
function ~quicksort~. The input comes from a file ~input~ (see below):
#+begin_src C :main no :cmdline < input
  #define N 10

  // function declarations
  void quicksort(int a[], int low, int high);
  int split(int a[], int low, int high);

  // main function
  int main(void)
  {
    int a[N], i; // declare array, loop variable
    printf("Enter %d numbers to be sorted: \n", N);
    for (i=0;i<N;i++) {    // get input array
      scanf("%d",&a[i]);
      printf("%d ", a[i]);
    }
    quicksort(a, 0, N-1); // call quicksort
    puts("\nIn sorted order:");  // print result
    for (i=0;i<N;i++)
      printf("%d ", a[i]);
    puts("");
    return 0;
  }

  // quicksort with recursion
  void quicksort(int a[], int low, int high)
  {
    int middle;
    if (low >= high) return; // do nothing
    middle = split(a, low, high); // find partitioning element
    quicksort(a, low, middle-1); // move low to right
    quicksort(a, middle+1, high); // move high to left
  }
  // split to find the partitioning element
  int split(int a[], int low, int high)
  {
    int part_element = a[low]; // partition starting with lowest element

    for (;;) {  // forever
      while (low < high && part_element <= a[high]) // move high left
        high--;
      if (low >= high) break;
      a[low++] = a[high];

      while (low < high && a[low] <= part_element) // move low right
        low++;
      if (low >= high) break;
      a[high--] = a[low];
    } // end of forever loop

    a[high] = part_element;
    return high;
  }
#+end_src

#+RESULTS:
: Enter 10 numbers to be sorted:
: 9 16 47 82 4 66 12 3 25 51
: In sorted order:
: 3 4 9 12 16 25 47 51 66 82

#+begin_src bash :results output :exports both
  echo 9 16 47 82 4 66 12 3 25 51 > input
  cat input
#+end_src

#+RESULTS:
: 9 16 47 82 4 66 12 3 25 51

** Improvements

- Instead of taking the first element, it's more efficient to take the
  median of the first, the middle and the last element.

- It's possible to avoid the ~low<high~ tests in the =while= loops.

- For smaller arrays (< 25 elements), use a different method.

- It's actually more efficient if the recursion is removed.

- More details in algorithm books like Sedgewick's [[https://www.amazon.com/Algorithms-Parts-1-5-Bundle-Fundamentals/dp/0201756080][Algorithms in C]]
  (2001), and in CSC 245 Algorithms next term.

* Notes

- /Parameter/ and /argument/ can be used interchangeably. I prefer
  "argument" for the function call, and "parameter" for the function
  declaration and definition.

- C/C++ does not allow function definitions to be nested. Python and
  R, for example, allow nested function definitions:
  #+begin_src python :results output :session *Python* :python python3 :exports both
    def outer_function():
        print("This is the outer function.")

        def inner_function():
            print("This is the inner function.")

        # Call the inner function
        inner_function()

    # Call the outer function
    outer_function()
  #+end_src

  #+RESULTS:
  : This is the outer function.
  : This is the inner function.

  #+begin_src R :session *R* :results output
    outer_function <- function() {
      print("This is the outer function.")

      inner_function <- function() {
        print("This is the inner function.")
      }
      ## Call the inner function
      inner_function()
    }
    ## Call the outer function
    outer_function()
  #+end_src

  #+RESULTS:
  : [1] "This is the outer function."
  : [1] "This is the inner function."

- A function name that is not followed by parentheses is interpreted
  as a /pointer/ by the compiler.

- The names of parameters in the function prototype do not have to
  match the names given later in the function's definition.

- We bother with function prototypes because
  1) not all functions are being called from =main= so we'd have to
     watch their order carefully if they weren't declared at top.
  2) If two undeclared functions call each other, one of them will not
     have been defined yet.
  3) Once programs get larger, it is no longer feasible to put all
     functions in one file, and we need prototypes to tell the
     compiler about functions in other files.

- Functions with the same return type can be combined, for example
  #+begin_example
    void print_1(void), print_2(int n);
    double x, y, average(double a, double b);
  #+end_example

- If you specify a length for a 1 dim array parameter, the compiler
  ignores it. It cannot automatically check that arguments have
  that length (no added security), and it may be misleading:
  #+begin_example C
    double inner_product(double v[3], double w[3]);
  #+end_example

- Why can the first dimension in an array parameter be left
  unspecified but not the other dimensions?
  #+begin_quote
  - If ~a~ is a 1-dim array passed to a function, it decays to a
    pointer to the first element. When we write ~a[i]=0;~, the
    address of ~a[i]~ is computed by multiplying ~i~ by the size of an
    array element and adding the result to the pointed to
    address. This does not depend on the length of ~a~.
  - If ~a~ is 2-dim and we write ~a[i][j]=0;~ the compiler (1)
    multiplies ~i~ by the size of a single row of ~a~, (2) add the
    result to address of ~a~, (3) multiplies ~j~ by the size of an
    array element, and (4) adds the result to the address computed
    in (2). Only the size of a row in the array (number of columns)
    is needed at the start and must be declared, not the rows
    (first index).
  #+end_quote

- Is it legal for a function ~f1~ to call a function ~f2~ which then
  calls ~f1~?
  #+begin_quote
  Yes, this is just an indirect form of recursion but one must make
  sure that either of these functions eventually terminates!
  #+end_quote

* Review Questions

1. What is a "function prototype"? Give an example.
   #+begin_quote
   A function prototype is a declaration of a function ahead of
   =main=. The more specific it is, the better the compiler can prepare
   itself for the function's definition and call.
   #+end_quote
   #+begin_example C
     // declare function without arguments and with no return type that
     void hello_world(void);
   #+end_example

2. Why do we bother with prototyping functions?
   #+begin_quote
   1) We don't have to watch the order of function definitions if
      functions are called from outside of =main=
   2) If two undeclared functions call each other, one of them will
      not have declared yet.
   3) For large programs, when functions reside in header files, the
      compiler needs prototype information to properly link the code.
   #+end_quote

3. What is a function parameter?
   #+begin_quote
   A function parameter is a dummy value that represents a value to be
   supplied when the function is called.
   #+end_quote

4. What does "In C, function arguments are passed by value" mean?
   #+begin_quote
   C function arguments are passed by value in that each argument is
   evaluated and passed to the corresponding parameter.
   #+end_quote
   #+begin_example C
    main: f(5+2); // evaluate 5+2 and pass 7 to f
    f: f(int i); // assign 7 to i
   #+end_example

5. Are changes to function parameter values reflected by changes in
   the call argument?
   #+begin_quote
   No. The parameter value is a copy of the original argument
   value. Changed values need to be returned from the function to
   alter memory outside the function - unless you make the variable
   =static=, or pass reference arguments to pointer parameters.
   #+end_quote

6. How is an array =a[n]= normally passed to a function =f=?
   #+begin_quote
   The function call passes =a= and the length of =a=, =n=. The function
   parameters are =int a[], int n=.
   #+end_quote

7. What is a source of "memory leaks" when passing arrays to
   functions? What does the compiler have to say about this?
   #+begin_quote
   The compiler cannot check that we've passed the correct array
   length to the function. If we write to memory outside of the
   defined array, we cause a /memory leak/. This may lead to a
   /segmentation fault/ or /buffer overflow/ error later.
   #+end_quote

8. Which of these lines declares a variable-length array, and what's
   the point of such an array?
   #+begin_example C
   int func(int n, int a[n]);
   int func(int, int []);
   int func(int a[n], int n);
   int func(int a[], int n);
   #+end_example
   Answer:
   #+begin_quote
   The length of VLAs can be specified using a non-constant
   expression, and VLAs can also be parameters.
   #+end_quote
   #+begin_src C
     int func1(int n, int a[n]);
     int func2(int, int []);
     int func3(int a[n], int n); // not correct: n is not known yet
     int func4(int a[], int n); // not a VLA
   #+end_src
9. What's the meaning of 'compound literal', and what's an example?
   #+begin_quote
   A compound literal is composed of an array term and an initializer
   list - as a way to save declaring and initializing an array, for
   example for =f(int n, int a[n])=, the call in =main= could look like
   this: =f(5, (int []) {1,2,3,4,5})= to initialize =a[5]=.
   #+end_quote
10. What is a /cast/? Give an example.
    #+begin_quote
    If =int i=1;= is defined as =int=, it can be cast (widening) to a =float=
    with the =(float)= operator: =(float)(i=).
    #+end_quote

11. What does the =exit= function do? Give an example of its use.
    #+begin_quote
    The =exit= function terminates a program and returns a status code
    to the operating system. The status code indicates whether the
    program ended successfully or encountered an error.
    #+end_quote

    #+begin_example C
    #include <stdlib.h>

    int main() {
        int result = 1; // Assume some operation that returns 1 on failure

        if (result != 0) {
            printf("Operation failed.\n");
            exit(EXIT_FAILURE); // Exit with failure status
        }

        printf("Operation succeeded.\n");
        exit(EXIT_SUCCESS); // Exit with success status
    }
#+end_example

12. Describe the process of recursion. Give a short example.
    #+begin_quote
    Recursion is a process where a function calls itself directly or
    indirectly in order to solve a problem. Each call works on a
    smaller instance of the same problem, and the process typically
    includes a base case to terminate the recursive calls.
    #+end_quote

    #+begin_example C

    #include <stdio.h>

    int factorial(int n) {
        if (n <= 1)
            return 1;
        else
            return n * factorial(n - 1);
    }

    int main() {
        int num = 5;
        printf("Factorial of %d is %d\n", num, factorial(num));
        return 0;
    }
    #+end_example

13. What is Quicksort and how does it work?
    #+begin_quote
    Quicksort is a divide-and-conquer algorithm used to sort an array. It
    works by selecting a 'pivot' element and partitioning the array into
    two sub-arrays: one with elements less than the pivot and one with
    elements greater than the pivot. The process is recursively applied to
    the sub-arrays.
    #+end_quote

* Practice Exercises
** Function with errors

The following function, which computes the area of a triangle,
contains two errors. Locate the errors and show how to fix
them. (Hint: There are no errors in the formula.)
#+begin_example C
double triangle_area(double base, height)
double product;
{
  product = base * height;
  return product / 2;
}
#+end_example

** Write a function =check(x,y,n)=

*Write a function* =check(x,y,n)= that returns =1= if both =x= and =y= fall
between =0= and =n-1= inclusive, and =0= otherwise. Assume that =x,= =y=, and
=n= are all of type =int=.

*Input/Output*:
|  x |  y |  n | return |
|----+----+----+--------|
|  0 |  1 |  0 |      0 |
|  0 |  1 |  1 |      0 |
|  0 |  1 | -1 |      0 |
|  0 |  0 |  1 |      1 |
|  1 |  1 |  2 |      1 |
|  0 | -1 |  0 |      1 |

** Greatest Common Denominator
Write a function =gcd(m,n)= that calculates the greatest common divisor
of the integers =m= and =n= using Euclid's algorithm.

/Hint:/ The classic algorithm for computing the GCD, known as
Euclid's algorithm, goes as follows: Let =m= and =n= be variables
containing the two numbers. If =n= is 0, then stop: =m= contains the
GCD. Otherwise, compute the remainder when =m= is divided by =n=. Copy
=n= into =m= and copy the remainder into =n=. Then repeat the process
starting with testing whether =n= is =0=[fn:1].

You can use this program that does the job without a function:
#+begin_src C :tangle gcd.c :results none
  printf("Enter two integer numbers: ");
  int m, n, gcd;
  scanf("%d%d",&m,&n);
  printf("m = %d, n = %d",m,n);

  if (n==0) {
    gcd = m;
   } else if (m==0) {
    gcd = n;
   } else {
    while (m%n != 0) {
      gcd = m%n;
      m = n;
      n = gcd;
    }
   }
  printf("\nGCD = %d\n", gcd);
#+end_src

Testing:
#+begin_src bash :results output :exports both
  gcc gcd.c -o gcd
  echo 12 20 | ./gcd
#+end_src

#+RESULTS:
: Enter two integer numbers: m = 12, n = 20
: GCD = 4

* Programming assignments

1. Write functions that return the following values. (Assume that =a=
   and =n= are parameters where =a= is an array of =int= values and =n= is the
   length of the array.
   1) The largest element in =a=.
   2) The average of all elements in =a=.
   3) The number of positive elements in =a=.

2. Write the following function:
   #+begin_example C
     float compute_GPA(char grades [], int n);
   #+end_example
   The =grades= array will contain letter grades (=A=, =B=, =C=, =D=, or =F=m
   either upper-case or lower-case); =n= is the length of the array. The
   function should return the average of the grades (assume that =A=4=,
   =B=3=, =C=2=, =D=1=, and =F=0=).

   /Hint/: the =stdlib::toupper= function turns lower case characters into
   upper case characters.
   #+begin_src C
     #include <stdlib.h>
     printf("%c\n", toupper('a'));
   #+end_src

   #+RESULTS:
   : A

3. The following function finds the median of three numbers. Rewrite
   the function so that it has just one =return= statement:
   #+begin_src C :results none
     double median(double x, double y, double z)
     {
       if (x <= y)
         if (y <= y) return y;
         else if (x <= z) return z;
         else return x;
       if (z <= y) return y;
       if (x <= z) return x;
       return z;
     }
   #+end_src

4. Write a recursive version of the =gcd= function (see practice
   exercises) to find the greatest common denominator of two
   integers. Here's the strategy to use for computing =gcd(m,n)=: If =n=
   is 0, =return =m=. Otherwise, call =gcd= recursively, passing =n= as the
   first argument and =m % n= as the second.

   In the =example= block below, sketch what happens for m=12, n=28 when
   the function =gcd_r= is called
   #+begin_example
     call gcd_r(12,28) ...
          call gcd_r(...)...
     ...
   #+end_example

   Here is the =gcd= function with a =main= function and a shell block to
   test it (tangle =gcd.c= first):
   #+begin_src C :main no :tangle gcd.c :results none
     int gcd(int a, int b)
     {
       while (b != 0) {
         int temp = b;
         b = a % b;
         a = temp;
       }
       return a;
     }

     int main(void)
     {
       int m, n;
       scanf("%d%d",&m,&n);
       printf("GCD of %d and %d: %d\n",m,n,gcd(m,n));
       return 0;
     }
   #+end_src

   #+begin_src bash :results output :exports both
     gcc gcd.c -o gcd
     echo 12 28 | ./gcd
   #+end_src

   #+RESULTS:
   : GCD of 12 and 28: 4

* Glossary

| Term/Command            | Explanation                                                     |
|-------------------------|-----------------------------------------------------------------|
| =exit=                  | Function to terminate the program with a status code            |
| =EXIT_SUCCESS=          | Macro indicating successful program termination                 |
| =EXIT_FAILURE=          | Macro indicating unsuccessful program termination               |
| =atoi=                  | Function to convert a string to an integer                      |
| /lvalue/                | Expression representing a memory location, assignable           |
| /rvalue/                | Expression representing a data value, not assignable            |
| =malloc=                | Function to allocate memory dynamically                         |
| =free=                  | Function to deallocate dynamically allocated memory             |
| =while=                 | Loop statement to execute code as long as a condition is true   |
| =for=                   | Loop statement to execute code a fixed number of times          |
| =quicksort=             | Recursive function to sort an array using Quicksort algorithm   |
| =split=                 | Function to find the partitioning element in Quicksort          |
| /recursion/             | Principle of a function calling itself                          |
| /divide-and-conquer/    | Algorithm design paradigm dividing a problem into subproblems   |

* Summary

1. Recursion involves a function calling itself directly or
   indirectly, working on smaller instances of the same problem until
   a base case is reached.
2. Functions can be designed to operate on arrays by passing the array
   and its length as arguments.
3. Variable-length arrays (VLAs) allow the array size to be specified
   at runtime, providing flexibility for functions that handle arrays.
4. Compound literals enable array initialization directly within
   function calls, simplifying the code and avoiding separate
   declarations.
5. The return statement is used to exit a function and optionally
   return a value to the calling function.
6. The exit function terminates a program and returns a status code
   to the operating system, indicating success or failure.

* Footnotes

[fn:1]Euclid's algorithm is based on the fact that the GCD of
two numbers does not change if the larger number is replaced by its
difference with the smaller number. The instructions shortcuts
these steps, instead replacing the larger of the two numbers by its
remainder when divided by the smaller of the two. With this
version, the algorithm never requires more steps than five times
the number of digits (base 10) of the smaller integer
