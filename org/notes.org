#+TITLE: NOTEBOOK - DATA STRUCTURES
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 Data Structures Lyon College Fall 2024
#+STARTUP: overview hideblocks indent entitiespretty:
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both
* Week 0 - Why You Are Here
#+attr_html: :width 500px:
[[../img/manga1.png]]

/Image: Why I like programming in C./

This week we met for our first session to get (re)acquainted with one
another, begin to learn about data structures, and understand what the
course is about.

** Why is the maximum number for a =char= type =127= and what does that mean?

It means that the computer can represent 127 characters, including
lower- and upper-case alphanumeric characters like ='a'= and ='A'=,
symbols like =+=, punctuation like =!=, and special characters like
newline, carriage return etc.

The maximum value is a constant stored in =limits.h=:
#+begin_src C :includes <float.h> <limits.h> <stdio.h>
  printf("%d\n", SCHAR_MAX);
#+end_src

#+RESULTS:
: 127

=127= is the maximum because the ASCII standard historically uses 7
bits - with 7 bits, each bit has two values so you can represent
2^7=128 different values, from 0 to 127.

To print the ASCII value of a character, print it with the =%d= format
specifier reserved for =int= (integer) values:
#+begin_src C :main yes :includes <stdio.h>
  printf("%d %d %d\n",'a','A','\\'); // the `\` must be escaped to be
  // printed as a character
#+end_src

#+RESULTS:
: 97 65 64

Later, an 8-th bit was added to extend the character set to 2^8 = 256
so that special symbols (like German umlauts =ü=, or the German =ß=) could
be represented.

* Week 1 - What Data Structures Are About
#+attr_html: :width 500px:
[[../img/manga2.png]]

** Syllabus: About Using AI to write code for you or debug your code

I'm feeling quite strongly about this - [[https://github.com/birkenkrahe/org/blob/master/fall24/UsingAItoCode.org][here are my views]], which I
also attached to the syllabus. The short version: "Don't do it."

** Review questions (week 1)

1. What's the point of studying data structures?
   #+begin_quote
   To know the most efficient ways of storing, organizing and
   accessing data to solve a given computational problem.
   #+end_quote
2. What is a reason to use C in a course on data structures?
   #+begin_quote
   C is small and basic, and does not have many layers of abstractions
   (aka complex concepts) so that you can see and use data structures
   more directly through memory allocation and de-allocation.
   #+end_quote
3. Do you remember any of the differences between C, C++, and C#?
   #+begin_quote
   For example:
   - C allows you to manage your computer's memory directly, and was
     developed in the 1970s.
   - C++ is an Object-Oriented extension of C,and was developed in
     the 1980.
   - C# was developed by Microsoft for commercial applications, and
     was developed in the early 2000s.
   #+end_quote
4. What is the computing infrastructure that we use in this course?
   And what does each component deliver?
   #+begin_quote
   1. GitHub - Course materials repository
   2. Linux - Operating System
   3. Emacs - Editor to create, document, and run source code
   4. Canvas - Grades, assignments, tests
   #+end_quote
5. What does "computing on the edge" refer to and do you have an
   example?
   #+begin_quote
   "Edge computing" refers to processing data close to where it is
   generated, such as sensors, IoT devices, or machines, instead of
   sending the data to a distant data center for processing. Examples:
   Autonomous vehicles, programming in space, and augmented reality.
   #+end_quote
6. How should you study for this course?
   #+begin_quote
   1) Code every day, create small examples
   2) Review lecture notes and lectures on GitHub
   3) Seek help when you need it and don't wait
   #+end_quote
7. What are C's primitive (or built-in) data types?
   #+begin_quote
   - Integer (=int=)
   - Floating-point (=float= or =double=)
   - Character (=char=)
   - Void (=void=)
   #+end_quote
8. What does it mean that the maximum value for a =char= data type is =127=?
   #+begin_quote
   It means that the computer can represent 127 characters, including
   lower- and upper-case alphanumeric characters like ='a'= and ='A'=,
   symbols like =+=, punctuation like =!=, and special characters like
   newline, carriage return etc.

   =127= is the maximum because the ASCII standard historically uses 7
   bits - with 7 bits, each bit has two values so you can represent
   =2^7=128= different values, from 0 to 127.
   #+end_quote
9. What will this code print?
   #+begin_src C
     int i = 10000000000;
     printf("%d\n",i);
   #+end_src
   Explain the result!
   #+begin_src C
     #include <limits.h>
     printf("%d\n",INT_MAX); // Max integer: 2,147,483,647
     // All 31 bits besides the sign bit are '1' = 2^31 - 1
     // Any number above leads to overflow with ill results
   #+end_src
   In Python:
   #+begin_src python :results output :session *Python* :python python3 :exports both
     print(2**(31)-1); # 2,147,483,647
   #+end_src
10. When you see =%zu= in a C program, what do you expect?
    #+begin_src C
      const size_t INT = sizeof(int);
      printf("An integer is stored in %zu bytes.\n", INT);
      const size_t CHAR = sizeof(char);
      printf("A character is stored in %zu bytes.\n", CHAR);
    #+end_src

    #+RESULTS:
    : An integer is stored in 4 bytes.
    : A character is stored in 1 bytes.

** Orientation II: Course Content (cont'd) & Development Tools
#+attr_html: :width 600px:
#+CAPTION: Still Life With a Volume of Wither's Emblemes by Edward Collier (1696)
[[../img/tools.png]]

- [X] Derived data types
- [X] Data structures
- [X] Linux (with practice in Google Cloud Shell)
- [X] Emacs (with practice & assignment)
- [X] GitHub (with assignment)

** Assignments (Details in Canvas) by next week (Tuesday)

The first one of these is similar to our practice in class (in Google
Cloud Shell), while the second one involves many more steps and
requires more independence.

1. Solve any one of the 10 programming entry problems and submit your
   solution as an Emacs Org-mode file, including:
   1) A file header:
      #+begin_example
      #+TITLE: [give it a title]
      #+AUTHOR: [your name] (pledged)
      #+SUBTITLE: CSC 240 - Data Structures with C++ - Lyon College, Fall'24
      #+STARTUP: overview hideblocks indent
      #+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output
      #+end_example
   2) An Org-mode headline with the program name, e.g. =* COOL PROGRAM=
   3) A short description of what the program does
   4) A code block
   5) Output as requested
   6) A short text reflecting on your experience - especially any
      difficulties you had during solving the exercise.

   To download the file from Google Cloud Shell, ="Open editor"= at the
   top, then open the explorer (="Home directory"=), right-click on the
   file name and =download= it to your PC.

   If your Emacs skills are rusty, you may need to complete [[https://tinyurl.com/emacs-tutor2][the Emacs
   tutorial]] (perhaps for the second time). See also the two videos
   that I made, linked at the start of the tutorial.

   The screenshot shows a sample file that is built exactly like the
   Org-mode file that you should submit (except with different code of
   course):
   #+attr_html: :width 600px:
   [[../img/sample.png]]

2. Complete the Hello World Project in GitHub and share a screenshot
   of your public GitHub repo with the hello-world repository.

   You find detailed step-wise instructions [[https://github.com/birkenkrahe/alg1/blob/main/org/0_overview.org#github-hello-world-exercise][here]] at the end of these
   lecture notes in GitHub.

** Review questions:

1. Examples for digital-to-analog, and for analog-to-digital
   conversion? Why is this relevant to data structures?
   #+begin_quote
   - Digital-to-analog: Player piano
   - Analog-to-digital: Voice recording
   - Relevance: Data structures are integral to the efficient storage,
     processing, compression, transmission, and conversion of digital
     data derived from analog signals. From basic arrays that store
     sample data to complex trees and graphs used in compression and
     error detection, they ensure that the digitization process is
     accurate, efficient, and reliable.
   #+end_quote
2. Explain this (full sentence): =const float PI = 3.14;=
   #+begin_quote
   Statement: Assign the value 3.14 to a constant floating-point
   variable =PI=
   #+end_quote
3. Explain this (full sentence): =#define PI 3.14=
   #+begin_quote
   Preprocessor directive: Replace the expression =PI= everywhere by the
   floating-point value =3.14=
   #+end_quote
4. What is Google Cloud Shell?
   #+begin_quote
   Google Cloud Shell is a command-line application that gives you
   access to a virtual Ubuntu 22.04 LTS Linux distribution.
   #+end_quote
5. What does the =gdb= debugger allow you to do?
   #+begin_quote
   The =gdb= program allows you to step through your program as it runs,
   and get information about variables and functions.
   #+end_quote
6. What do you need to do to use =gdb=?
   #+begin_quote
   You need to compile the source code with =gcc= and the =-g= flag, for
   example: =gcc main.c -o main -g= generates a debuggable executable
   =main=. Now you can start the debugger with =gdb main=.
   #+end_quote

** Introduction to Data Structures (Lecture) I (handout)

* Week 2 - The Concert in the Egg Begins
#+attr_html: :width 600px:
#+caption: The Concert in the Egg ca. 1550 AD
[[../img/TheConcertInTheEgg.jpg]]

See on [[https://youtu.be/vfUAs7YbxlE?si=Rbw8egV_s_XQ6DGP][YouTube]]: The music in the painting, "Toutes les nuits que sans
vous je me couche" (Every night that I go to bed without you) by
Thomas Crecquillan (1549).

- [X] Setup: Linux server
- [X] Review: Intro to data structures
- [X] Array basics
- [ ] Quiz 2 is live (some missed Quiz 1)
- [ ] Graded: first two assignments
- [ ] Shared: sample solutions [[https://github.com/birkenkrahe/alg1/blob/main/org/alg1_entry_code_solutions.org][for C++]] and [[https://github.com/birkenkrahe/alg1/blob/main/org/alg1_entry_code_solutions_C.org][for C]]
- [ ] Review: Array basics (with practice)
- [ ] Array as data structure (code along lecture)

** Linux server has arrived

- You should have received your VM server address and password

- Start "Remote Desktop Protocol" on your (Windows) PC

- Enter the server name (e.g. =cslinux01.lyon.edu=) => =Connect=

- Login the =Xorg= session with username =firstname.lastname=, pw

- *Do not shut down or log out of the VM but only close the window*

- Currently access only from Lyon 104 but other subnets will be added.

- IT will give me admin access and set VMs to auto-boot soon.

** Review: Introduction to Data Structures I

1) Define "data structure"
   #+begin_quote
   A data structures is a way of organizing and storing data in a
   computer using a programming language.
   #+end_quote
2) Do different programming languages have different data structures?
   #+begin_quote
   Yes, different programming languages have different data
   structures. Some are built in, others have to be user-defined.
   #+end_quote
3) Name at least three different data structures!
   #+begin_quote
   1. Arrays, vectors, matrices
   2. Lists, Dictionaries
   3. Structures, classes
   4. Enumerations, strings
   5. Data frames, tables
   #+end_quote
4) Define "algorithm".
   #+begin_quote
   A step-by-step procedure to solve a problem with or without a
   computer, for example searching, sorting, printing.
   #+end_quote
5) What is the most common data structure in C, Python, R?
   #+begin_quote
   1. C: array
   2. Python: list
   3. R: vector
   #+end_quote

** Introduction to Data Structures (Lecture) II
** Array basics (review)
** On the Programming Assignments
#+attr_html: :width 400px:
#+caption: Portrait de femme au col d'hermine (Olga) - Picasso (1923)
[[../img/picasso.png]]

- This term, I am implementing a new rubric for grading your
  programming assignments. Check it out in the syllabus.

- The core message: complete the assignments on time and to the letter
  to get 100% of the points. Don't, and you lose points.

- For this first assignment, you can fix your mistakes and resubmit
  for full points. Only a handful completed all of the simple tasks.

- Make sure to read the full assignment and satisfy it to the
  letter. In this case, there was a complete sample solution available
  ([[https://github.com/birkenkrahe/alg1/blob/main/org/sample.org][GitHub or raw org]]), and all you had to do was imitate it.

** Review: Intro to data structures / array basics

We'll combine this review with some light coding. Useful also for the
2nd quiz where I've used some of these examples.

- Create an .org file
- Add at the top:
  #+begin_example
  #+property: header-args:C :main yes :includes <stdio.h> :results output
  #+end_example
- Run this line with C-c C-c
- Test it by creating a code block with: <s <TAB>
- In the code block write =printf("Hello, beautiful!");=
- Run this thing: C-c C-c


1. What distinguishes the choice of different data structures?
   #+begin_quote
   - Performance (speed, for example when searching through data)
   - Standardization (adherence to coding and data standards)
   - Portability (ability to run code anywhere)
   #+end_quote

2. You declare an array =A= in =main=. Where is this array stored in
   memory?
   #+begin_quote
   In the stack, because it is a local variable that disappears as
   soon as the =main= function is finished (when =return 0= is reached).
   #+end_quote
   Code example:
   #+begin_src C
     int main(void)
     {
       int A[5]; // array declaration
       return 0;
     }
   #+end_src

   #+RESULTS:

3. Which parts of the memory are read-only?
   #+begin_quote
   The memory sections for =const= "variables", and for machine code.
   #+end_quote
   Code example:
   #+begin_src C :results none
     const float pi = 3.1459; // stored in read-only memory
     pi++;  // pi = pi + 1 - generates error
   #+end_src

4. What is the memory "heap"?
   #+begin_quote
   The heap is memory reserved for "dynamically allocated" variables -
   variables whose memory is determined during run-time rather than
   compile-time. Such memory is allocated using the =malloc= function.
   #+end_quote
   Code example:
   #+begin_src C :includes <stdlib.h> :results none

     int *A = (int*)malloc(5 * sizeof(int)); // Allocate memory for 5 integers
     // You can now assign values to A[0] through A[4]
     free(A); // Free the allocated memory

   #+end_src

5. What are the stages of solving a computational problem?
   #+begin_quote
   1) Understanding the problem
   2) Identify solution (pseudocode)
   3) Identify data structures
   4) Implement solution
   5) Check solution (rinse & repeat if necessary)
   #+end_quote

6. Define "Abstract Data Type" and give at least one example
   #+begin_quote
   An abstract data type is a data structure together with basic
   operations (creation, deletion, insertion, extraction etc.)

   Examples:
   1) user-defined classes (=dog=), methods =doTricks=, =sleep=
   2) built-in arrays with element insertion, extraction
   3) linked lists with item insertion, removal
   #+end_quote

7. How would you declare and initialize an integer array of five
   elements with zero?
   #+begin_src C
     // Explicit initialization
     int A[5]; A[0]=A[1]=A[2]=A[3]=A[4]=0;
     // Implicit initialization
     int B[5] = {0};
     // Loop initialization
     int i; int C[5];
     for (i = 0; i < 5; i++)
       C[i] = 0;
     // Check results
     int j;
     for (j=0;j<5;j++) {
       printf("A[%d]: %d ", j, A[j]);
       printf("B[%d]: %d ", j, B[j]);
       printf("C[%d]: %d \n", j, C[j]);
      }
   #+end_src

   #+RESULTS:
   : A[0]: 0 B[0]: 0 C[0]: 0
   : A[1]: 0 B[1]: 0 C[1]: 0
   : A[2]: 0 B[2]: 0 C[2]: 0
   : A[3]: 0 B[3]: 0 C[3]: 0
   : A[4]: 0 B[4]: 0 C[4]: 0

8. What do you get when you print undeclared array elements?
   #+begin_quote
   You get 'undefined behavior'. Example: change the upper limit of
   the =Check results= loop from =5= to =10=.
   #+end_quote
   #+begin_src C
     // Explicit initialization
     int A[5]; A[0]=A[1]=A[2]=A[3]=A[4]=0;
     // Implicit initialization
     int B[5] = {0};
     // Loop initialization
     int i; int C[5];
     for (i = 0; i < 5; i++)
       C[i] = 0;
     // Check results
     int j;
     for (j=0;j<7;j++) {
       printf("A[%d]: %d ", j, A[j]);
       printf("B[%d]: %d ", j, B[j]);
       printf("C[%d]: %d \n", j, C[j]);
      }
   #+end_src

   #+RESULTS:
   : A[0]: 0 B[0]: 0 C[0]: 0
   : A[1]: 0 B[1]: 0 C[1]: 0
   : A[2]: 0 B[2]: 0 C[2]: 0
   : A[3]: 0 B[3]: 0 C[3]: 0
   : A[4]: 0 B[4]: 0 C[4]: 0
   : A[5]: 0 B[5]: 0 C[5]: 0
   : A[6]: -1412640919 B[6]: -1075053569 C[6]: -1533928960
9. When is the length of an array determined?
   #+begin_quote
   When the length of an array is determined depends on type of array:
   if it is a regular array, it is determined at compile time and
   cannot be changed when the program is run. If it is a
   variable-length array, or if it is a dynamically allocated array,
   its length is determined when the program is run ("at run-time").
   #+end_quote

10. When would it be useful to determine the length of an array when
    the program is running?
    #+begin_quote
    For example when the size of the data is user-driven: if a user
    specifies how many numbers they want to input, the array size must
    be determined based on their input.
    #+end_quote
    Code example for a variable-length based array:
    #+begin_src C :tangle main.c

      int n; // user-defined array length
      scanf("%d",&n); // get the length n from keyboard
      int A[n]; // Variable-Length Array
      int i;
      for(i=0;i<n;i++) {
        A[i]=i*i;  // assign value
        printf("%d ",A[i]); // print value
       }
    #+end_src

    #+RESULTS:

    Run tangled source code file:
    #+begin_src bash :results output
      gcc main.c -o main
      echo 10 | ./main
    #+end_src

    #+RESULTS:
    : 0 1 4 9 16 25 36 49 64 81

* Week 3 - Array Basics
#+attr_html: :width 600px:
#+caption: M C Escher (geese)
[[../img/escher1.jpg]]

- [X] Quiz 2 to be completed (Fri 6 Sep)
- [X] Two new programming assignments (Tue 10 Sep)
- [X] If you're stumped - contact me

** Reviewing the Array Basics Review

1. If =A= is an array, what is =&A=?
   #+begin_quote
   If =A= is an array, then =&A= is the address of =A[0]=, the first element
   of =A=.
   #+end_quote
   #+begin_src C
     int A[2] = {100,200}; // declare & initialize array of two elements
     printf("%p\n%p", &A, &A[0]); // print address-of-A and address-of-A[0]
   #+end_src

   #+RESULTS:
   : 0x7ffcd3c67d20
   : 0x7ffcd3c67d20

2. How is the memory of an array organized?
   #+begin_quote
   The memory of an array is contiguous in memory, that is that the
   memory cells that hold array values are placed next to one another
   (this is the basis of *pointer arithmetic*). For a 2-dim array (aka
   matrix), the elements are stored in row-wise fashion.
   #+end_quote
   #+begin_src C
     int A[2][2] = {{1,2},{3,4}};
     printf("%p %p %p %p\n",       // print addresses as hexadecimals
            &A[0][0], &A[0][1],
            &A[1][0], &A[1][1]);
     printf("%d %d %d %d\n",       // print addresses as decimals
            &A[0][0], &A[0][1],
            &A[1][0], &A[1][1]);
   #+end_src

3. What's pointer arithmetic?
   #+begin_quote
   Arithmetic with memory positions. If =p= is an integer pointer, then
   =*(p + 1)= moves the pointer =p= by =1= integer (4 bytes), e.g. from
   memory position 100 to 104, because =sizeof(int)= is 4 bytes.
   #+end_quote

4. What's a variable-length array?
   #+begin_quote
   An array whose length is determined at run-time. It cannot be
   initialized in the source code, only declared, and its length comes
   from the user when the program runs.
   #+end_quote

5. What does =:main no= mean as a header argument?
   #+begin_quote
   It does not add =int main(void) { ... return 0; }= to the source
   code.
   #+end_quote

6. What does =:includes <limits.h>= mean as a header argument?
   #+begin_quote
   It adds =#include <limits.h>= to the C source code at the top.
   #+end_quote

7. In Linux, how can you find out how much memory is available?
   #+begin_src bash :results output :exports both
     free -h  # give me the free memory for humans
   #+end_src

   #+RESULTS:
   :                total        used        free      shared  buff/cache   available
   : Mem:           7.5Gi       2.3Gi       756Mi       617Mi       4.5Gi       4.3Gi
   : Swap:          2.0Gi          0B       2.0Gi

8. What is =bash=? What does it do?
   #+begin_quote
   =bash(1)= is a Linux shell program. It allows you to run other
   programs like =gcc= or =echo= or =free=. 'Run X on the shell/in the
   terminal' means 'let =bash= run it'. Some commands, like =cd=
   #+end_quote
   Example:
   #+begin_src bash :results output
     gcc --version
   #+end_src

9. What does "piping input into =main=" mean? Example?
   #+begin_quote
   It's a way of passing output from one program to another
   program. Example: in the command =echo 10 | ./main=, the number 10 is
   passed to a program called =main=. If =main= cannot use the number,
   it is simply ignored by =main=.
   #+end_quote

   An example that only works if you have a =main.c= program that takes
   the number =10= as a keyboard input:
   #+begin_src bash
     gcc main.c -o main
     echo 10 | ./main
   #+end_src

   #+RESULTS:
   : 0 1 4 9 16 25 36 49 64 81

10. What's wrong with this header argument?
    #+begin_example
    #+PROPERTY: header-args:C :main yes :includes <stdio.h> results: output
    #+end_example
    Answer: The =results= argument needs a colon in front of it:
    #+begin_example
  #+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output
  #+end_example


** Arrays as data structures (handout)
#+attr_html: :width 600px:
#+caption: M C Escher (birds)
[[../img/escher.jpg]]

* Week 4 - VLAs, Macros, Arrays
#+attr_html: :width 300px:
#+caption: M C Escher (crystal ball)
[[../img/escher.gif]]

- [X] Emacs tip of the day: creating more than one window (C-x 5 2)
- [X] Video + solution "Sample Array Operations" assignment
- [X] 2 more programming assignments for arrays
- [X] Continue with the "reverse array elements" program ([[file:2_arrays_codealong.org][code along]])
- [X] Quiz 3 is live
- [X] Learn different ways to compile and run a source code file
- [X] Learn Variable-Length Arrays (VLAs) for dynamic allocation
- [X] Learn parameter macros

** Programming assignments and sample solutions

Please let me know how to make these videos better (if you have an
idea, and if you don't, just give me some general feedback).

Use my sample solution to create your own solution if you like and
submit it late for at most 50% of the points, but make sure that you
don't copy and paste but write all code by hand and understand it.

* Week 5 - Diligence and Debugging
#+attr_html: :width 600px:
[[../img/coach.png]]

- [X] Assignment 3 + 4 review
- [X] Assignment 5 preview
- [X] Review (and quiz 4 preview)
- [X] Using the =gdb= debugger
- [X] Three simple practice exercises
- [ ] Functions & Recursion

** Assignment 3 review - A sermon, code, questions, and some answers
#+attr_html: :width 600px:
[[../img/submission3.png]]

For this assignment, I will waive the 50% rule for late
submissions. If you submit a correct version within 1-2 weeks you can
still get full points.

The complete problem & sample solution file is on GitHub:
[[https://tinyurl.com/simple-array-operations-org][tinyurl.com/simple-array-operations-org]] - the video is on YouTube:
http://www.youtube.com/@LiterateProgramming

*** A look at a sad,sad gradebook (snapshot, Sat 14-Sep)
#+attr_html: :height 500px:
[[../img/grades.png]]

**** Data science people: Plot it using R!

#+begin_src R :file grades.png :session *R* :results file graphics output :exports both
  grades <- c(0.,7.62,30.16,30.16,32.59,45.24,45.56,53.02,
              59.26,62.22,63.17,65.4,76.19,98.33,98.41,98.89)
  hist(grades, xlab="Grades [%]", main="Total grades CSC 240 (14-Sep-2024)");
  abline(v=mean(grades),col="red",lwd=2)
#+end_src

#+RESULTS:
[[file:grades.png]]


*** Did anyone do well?
#+begin_quote
- Only one student (Austin) received a grade for a complete & correct
  submission.
- Everyone else either did not submit (0 points) or received feedback
  and was asked to resubmit within 1-2 weeks for full points.
- If you did not submit (and have no accommodations), you get at most
  50% (so it's worth submitting even if you have very little).
- If you have accommodations, you've got an extra week (you might have
  to remind me).
#+end_quote

*** Why can't we just submit the code?
#+begin_quote
You know the answer: I want you to engage not just with solving the
problem, which is often very simple, but with the infrastructure, with
the class material, and with your own problem solving abilities (or
lack thereof). The raw code is something AI can produce already.

Another reason: Your code is buggy. Do you really mean for me to run
your code, fix your errors, etc. Would that irritate or interest you
if you were me? I believe I can spend my time a lot more useful than
that. Time-wise, checking a submission & fixing & giving feedback
takes no less than 15 minutes, which would be four hours per
programming assignment for this class only, or 8 hours for two weekly
assignment = one whole work day.
#+end_quote


*** What areas of improvement were there this time?

1) Submission contains only the code and some accidental output.

2) The test case, which must be reproduced to the letter, is missing.

3) The reflection comes at the end and appears perfunctory.

4) The solution path is missing (usually at the start).

5) The document contains no structural elements (like headlines).

6) The code shows no indentation, and is hard to read (use C-M-\)

7) The =main= and =include= commands are already in the header but they
   are repeated.

8) The program is missing a header - not explicitly asked for but
   important: do you really want to have to read the code/comments to
   find out what this program does?

9) The shell code block is missing the =:results output= header.

10) Using different loop variables though there is only one type of
    loop (over the elements of the array).

11) The Org-mode file meta data at the top of the file are
    malformatted: for example `#+title` is just text - the keyword is
    =#+title:=, and `#+` on its own achieves nothing.

12) The documentation is not to be hidden after C comments `//` or
    `#+` or in a separate text file but in (ideally ahead of) the
    code.

All of this is perfectly clear in any of my lecture of practice files.


*** What happens if I always submit correct code but don't respect the instructions?
#+begin_quote
You know the answer: If I don't get a resubmission, you will be judged
according to the rubric. Data structures is not an introductory course
for people who want to see if programming is for them. It's a serious,
difficult collection of topics that you need to master on your way
towards becoming a computer or data science *professional*.
#+end_quote


** Which rubric?
#+attr_html: :width 600px:
[[../img/rubric.png]]


*** Is there no other way?
#+begin_quote
Not at Lyon. You can probably create a brilliant career for yourself
studying hard and with great discipline, on your own, with mostly free
resources, spending time rather than money - I've done it myself, but
currently you're on a different path, and why not make the best of it?
#+end_quote


*** What if I just didn't have enough time but wanted to submit what I had?
#+begin_quote
That's perfectly fine if you respond to my feedback within a
reasonable amount of time (1-2 weeks) and resubmit with fixes. I am
easy in that I will still give you full points for applying yourself -
but just trying is no longer enough.
#+end_quote


*** Why do students not respect instructions for submission?

- This is what ChatGPT has to say what the resons could be why some,
  not all students systematically ignore my instructions:
  #+begin_quote

There are several potential reasons why students might systematically
ignore submission instructions:

1. *Lack of Clarity or Understanding*: Students may not fully understand
   the instructions due to unclear language or insufficient
   examples. If instructions are ambiguous or overly complex, students
   may misinterpret them.

2. *Overwhelming Details*: When submission instructions contain too many
   steps or technical details, students may feel overwhelmed and skip
   parts they consider less important.

3. *Lack of Emphasis on Consequences*: If students don't perceive clear
   consequences for failing to follow submission guidelines, they may
   not see the value in adhering to them strictly.

4. *Time Management Issues*: In a rush to meet deadlines, students may
   prioritize completing the task itself over ensuring the submission
   follows the format exactly.

5. *Lack of Familiarity with Tools*: Students unfamiliar with tools like
   Org-mode or Emacs may struggle with those aspects of the submission
   process, especially if they haven’t had enough practice or
   guidance.

6. *Technical Difficulties*: Issues such as trouble with software setup,
   tangling files, or file submission platforms might lead students to
   avoid following the specific instructions.

7. *Perception of Redundancy*: Students may see submission instructions
   as bureaucratic or unnecessary if they believe the core task
   (solving the problem) is more important than the format in which
   it's submitted.

8. *Disregard for Attention to Detail*: Some students may not yet
   appreciate the importance of attention to detail, particularly in
   fields like computer science, where strict adherence to
   instructions is often essential.

9. *Inadequate Feedback*: If students previously ignored submission
   instructions without receiving specific feedback about that, they
   may not realize it's a problem.

10. *Language Barriers*: For students for whom the language of
    instruction is not their first language, submission instructions
    might be harder to grasp, particularly if there’s jargon or
    technical language involved.

Understanding these reasons can help instructors adjust their
approach—whether by simplifying instructions, providing more training
on tools, or emphasizing the importance of submission formatting.
  #+end_quote

Short summary:

| ISSUE                  | ACTION                                                  |
|------------------------+---------------------------------------------------------|
| *Lack of clarity*        | Ask! Let me know if anything is unclear                 |
| *Overwhelming detail*    | Translate instructions for yourself                     |
| *Lack of consequences*   | You must resubmit until you have fixed your submission  |
| *Time management*        | Start early, program a little daily, ask for help       |
| *Unfamiliar tools*       | Go through the Emacs tutorial. Code along my videos.    |
| *Technical issues*       | Practice more and/or install tools on your laptop       |
| *Format unimportant*     | Just believe me when I say it's important               |
| *No attention to detail* | Switch off distractions and focus on the details        |
| *Inadequate feedback*    | You should have had message(s) from me about this       |
| *Language barrier*       | Again: ask me, or ask other students, and learn         |

Short response:

1. Suck it up!
2. It's for your own good!
3. No pain, no gain!

*** What else will you do to help us?
#+begin_quote
- I will make a video of my sample solution, which you can use to
  improve your game, identify your mistakes, and help me make better
  videos.

- I will continue to give you detailed feedback so that you can fix
  your errors. I usually "reassign" the assignment without giving 0
  points. In this way your grade does not suffer but if I don't get a
  resubmission within 1-2 weeks, I will give you partial points (50%).

- Talk to me if you're unhappy about this and we can try to find a
  solution that satisfies both my and your needs!
#+end_quote
*** Any questions?

You must learn to ask questions, ideally in the class: most problems
that I've encountered are shared among students. Help others and they
will help you!

** Assignment 4 review
#+attr_html: :width 600px:
[[../img/submission3.png]]

For this assignment, I will waive the 50% rule for late
submissions. If you submit a correct version within 1-2 weeks you can
still get full points.

The complete problem & sample solution file is on GitHub:
[[https://tinyurl.com/array-temperature-analysis-org][tinyurl.com/array-temperature-analysis-org]] - a short video (v1 only)
is on YouTube: http://www.youtube.com/@LiterateProgramming

Nothing new - almost everybody made the same mistakes (3/9 submissions
got full points). I noticed that many of you seem to submit 5 minutes
before the deadline. That's not leaving yourself enough time for
something that requires a lot of diligence.

** Review: VLA, Macros & Quiz 4 Preview

1. How would you compute the course average using VLAs in C! Here are
   the grades for you to copy: [[https://tinyurl.com/grades-fall24][tinyurl.com/grades-fall24]]

   #+begin_src bash :results output :exports both
     echo 7.62 30.16 30.16 32.59 45.24 45.56 53.02 59.26\
          62.22 63.17 65.4 76.19 98.33 98.41 98.89 > ../data/grades
     cat ../data/grades
   #+end_src

   #+RESULTS:
   : 7.62 30.16 30.16 32.59 45.24 45.56 53.02 59.26 62.22 63.17 65.4 76.19 98.33 98.41 98.89

   This is really easy in R:
   #+begin_src R :session *R* :results output :exports both
     df <- read.csv("https://tinyurl.com/grades-fall24",sep=" ",header=FALSE)
     df
     mean(read.csv("https://tinyurl.com/grades-fall24",sep=" ",header=FALSE))
   #+end_src

   #+name: grades
   #+begin_src C :tangle main.c
     int i, n;
     float grades[n], sum=0.;
     scanf("%d",&n);
     for (int i=0;i<n;i++) {
       scanf("%f",&grades[i]);
       printf("%g ",grades[i]);
       sum+=grades[i];
      }
     printf("\nAverage = %g\n",sum/n);
   #+end_src

   #+RESULTS: grades
   : 7.63359e-33 4.56655e-41 7.63176e-33 4.56655e-41 1.26117e-44 1.4013e-45 7.6324e-33 4.56655e-41 0 0 0 4.56655e-41 0 0 0 4.59121e-41 -nan 0 7.64256e-33 4.56655e-41 7.63921e-33 4.56655e-41 7.81411e-33 4.56655e-41 7.64256e-33 4.56655e-41 7.63377e-33 4.56655e-41 7.81625e-33 4.56655e-41 7.63752e-33 4.56655e-41 7.63979e-33 4.56655e-41 0 0 7.63856e-33 4.56655e-41 1.82169e-44 0 7.63176e-33 4.56655e-41 7.51747e-33 4.56655e-41 3.31953e+15 3.06296e-41 3.32257e+15 3.06296e-41 7.8121e-33 4.56655e-41 7.69459e-33 4.56655e-41 1.4013e-45 0 0 0 7.63921e-33 4.56655e-41 7.71997e-33 4.56655e-41 1.73856e-30 4.59121e-41 1.73861e-30 4.59121e-41 1.4013e-45 0 1.73863e-30 4.59121e-41 3.31953e+15 3.06296e-41 7.70328e-33 4.56655e-41 0 0 3.32257e+15 3.06296e-41 1.73864e-30 4.59121e-41 0 0 7.8156e-33 4.56655e-41 7.52299e-33 4.56655e-41 7.65562e-33 4.56655e-41 0 0 7.81527e-33 4.56655e-41 7.81657e-33 4.56655e-41 1.4013e-45 4.59121e-41 1.13001e-41 9.18341e-41 1.73844e-30 4.59121e-41 -0.0113305 2.36539e-42 0 0 0 0 0 0 1.82357e-30 4.59121e-41 0 4.48416e-44 0 0 0 0 1.25556e-42 1.25556e-42 1.4013e-45 0 1.02539e-36 1.4013e-45 0 0 1.25556e-42 1.25556e-42 1.25556e-42 1.25556e-42 1.25556e-42 1.25556e-42 0 0 0 0 0 0 0 0 0 0 0 0 3.57331e-43 3.57331e-43 0 0 1.59329e-10 1.59329e-10 1.59329e-10 1.59329e-10 4.87652e-42 0 0 0 1.34525e-43 0 0 0 1.4013e-45 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4.59177e-41 0 8.26519e-40 0 1.14794e-41 0 1.10203e-39 0 4.59177e-41 0 8.26519e-40 0 1.12104e-44 0 8.96831e-44 0 5.60519e-45 0 8.96831e-44 0 1.68156e-44 0 2.8026e-45 0 1.96182e-44 -0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7.73849e-33 4.56655e-41 1.82169e-44 0 1.4013e-45 0 1.4013e-45 0 1.4013e-45 0 3.31834e+15 3.06296e-41 7.73235e-33 4.56655e-41 2.84744e-42
   : Average = -nan

   #+begin_src bash :results output :exports both
     gcc main.c -o main && echo "16 0. 7.62 30.16 30.16 32.59 45.24 45.56
     53.02 59.26 62.22 63.17 65.4 76.19 98.33 98.41 98.89" | ./main
   #+end_src

   #+RESULTS:
   : 0 7.62 30.16 30.16 32.59 45.24 45.56 53.02 59.26 62.22 63.17 65.4 76.19 98.33 98.41 98.89
   : Average = 54.1387

   You can also get this from the URL with =wget=:
   #+begin_src bash :results output :exports both
     echo 16 > grades2
     wget -q -O - https://tinyurl.com/grades-fall24 >> grades2
     cat grades2
   #+end_src

   #+RESULTS:
   : 16
   : 7.62 30.16 30.16 32.59 45.24 45.56 53.02 59.26 62.22 63.17 65.4 76.19 98.33 98.41 98.89

   Now you can redirect the file =grades2= into the executable =./main=
   #+begin_src bash :results output :exports both
     gcc main.c -o main && ./main < grades2
   #+end_src

   #+RESULTS:
   : 7.62 30.16 30.16 32.59 45.24 45.56 53.02 59.26 62.22 63.17 65.4 76.19 98.33 98.41 98.89 4.55926e-41
   : Average = 54.1387

   Incidentally, you can do this also in the Org-mode code block using
   the header argument =:cmdline < grades2=, and then you don't have to
   tangle the source code:
   #+begin_src C :cmdline < grades2
     int i, n;
     float grades[n], sum=0.;
     scanf("%d",&n);
     for (int i=0;i<n;i++) {
       scanf("%f",&grades[i]);
       printf("%g ",grades[i]);
       sum+=grades[i];
      }
     printf("\nAverage = %g\n",sum/n);
   #+end_src

   #+RESULTS:
   : 7.62 30.16 30.16 32.59 45.24 45.56 53.02 59.26 62.22 63.17 65.4 76.19 98.33 98.41 98.89 4.59149e-41
   : Average = 54.1387

   In future assignments with user input, you can pick your poison -
   =bash= code block input with pipe command, or =cmdline= file input.

2. What constraints are place on VLA declaration?

   #+begin_quote
   Variable-length arrays get their length at run-time so they cannot
   be initialized at compile-time.
   #+end_quote

3. In an array =a[10]=, what is the difference between =sizeof(a[0])= and
   =sizeof(a[10])=, and how would you show this?

   #+begin_src C
     int a[10]={0};
     printf("Size of a[0] = %zu\nSize of a[10] = %zu\n",
            sizeof(a[0]),       sizeof(a[10]));
   #+end_src

   #+RESULTS:
   : Size of a[0] = 4
   : Size of a[10] = 4

4. How would you convert the following selection statement into a
   parameter macro?

   #+begin_example C
   if (x < y)
      x
   else
      y
   #+end_example
   #+begin_src C
     #define MIN(x,y) ((x)<(y)?(x):(y))

     int x = 100, y = 200;
     printf("min(%d,%d) = %d", x,y,MIN(x,y));
   #+end_src

   #+RESULTS:
   : min(100,200) = 100

5. What if you were tired of writing =sizeof(a)/sizeof(a[10])= - could
   you write it as a parameter macro?

   #+begin_src C
     #define LEN(a) sizeof(a)/sizeof(a[10])

     int a[10];
     printf("Length of array: %zu\n", LEN(a));
   #+end_src

   #+RESULTS:
   : Length of array: 10

6. What if you don't want to use =0= and =1= for =false= and =true=?
   #+begin_quote
   If you want to use =true= and =false=, =#include <stdbool.h>=. Now you
   can declare a =bool= data type.
   #+end_quote

   Example:
   #+begin_src C
     #include <stdbool.h>

     bool beauty = true;
     bool ugly = false;

     printf("If beautiful equations are %s,\nthen ugly equations are %s.\n",
            beauty ? "true" : "false",
            ugly   ? "true" : "false");
   #+end_src

   #+RESULTS:
   : If beautiful equations are true,
   : then ugly equations are false.

7. When using AI to help you solve an assignment, what must you do?
   #+begin_quote
   When using AI assistance in any way, I suggest you mention in your
   solution that, and how, you made use of it (and if it helped you).
   #+end_quote

** Using the C debugger =gdb=
#+attr_html: :width 400px:
[[../img/pythontutor.png]]

- Get the raw file from tinyurl.com/repdigit-c on the shell (=M-x shell=
  #+begin_src bash :results output :exports both
    wget -O repdigit.c tinyurl.com/repdigit-c
    ls -l repdigit.c
  #+end_src

  #+RESULTS:
  : -rw-rw-r-- 1 marcus marcus 885 Sep 19 09:45 repdigit.c

- Open the source code file with =M-x global-linum-mode=

- Split the screen into shell and source code file:
  #+attr_html: :width 500px:
  [[../img/repdigit2.png]]

- Compile the file with the =-g= flag:
  #+begin_src bash :results output :exports both
    gcc repdigit.c -o rep -g
    ls -l rep
  #+end_src

  #+RESULTS:
  : -rwxrwxr-x 1 marcus marcus 17384 Sep 19 09:45 rep

- Run it through the =gdb= debugger with: =gdb rep=

- Commands to try in =gdb=:
  #+begin_example
  (gdb) run
  (gdb) help
  (gdb) info locals
  (gdb) break 23
  (gdb) step
  (gdb) print n
  (gdb) continue
  #+end_example

- Compare with =pythontutor.com=:
  1) Choose =C=
  2) Paste =repdigit.c= into editor
  3) Visualize execution
  4) Step through program with =Next=

** Three practice exercises
#+attr_html: :width 400px:
[[../img/practice.png]]

Solve these exercise in class and upload your results for bonus
points to Canvas:

- Boolean array declaration
- Array of Fibonacci numbers
- Initialize and print matrix

  Solutions to the exercises are in GitHub in the PDF directory.

* Week 6 - Function Prototypes and Parameters
#+attr_html: :width 600px:
[[../img/four-monks-by-rinaldi-9696.jpg]]

/Image: Four monks by Claudio Rinaldi (1852-1909). (Dorotheum, Munich)/

Topics:
- [X] Warm-up program
- [X] Function prototypes [assignment 6]
- [X] Arguments vs. Parameters
- [X] Passing arrays (by reference [assignment 7]
- [ ] Compound literals
- [ ] Return and exit
- [ ] Recursion
- [ ] Quicksort algorithm

Every topic will generate 1 home programming assignment!

Only 2 assignments per week will be mandatory, the others: bonus!
- Turn warmup program into program with 3 functions
- Write function headers for functions seen in class

** Results: Quiz 3 + 4
#+attr_html: :width 600px:
[[../img/quiz3.png]]

Quiz 3

#+attr_html: :width 600px:
[[../img/quiz4.png]]

Quiz 4

- Good: Almost everybody turns in the quiz on time!
- Good: Consistent performance (one outlier only)
- OK: Average time 12-17 minutes (one extreme outlier)

** Results: Programming assignment
#+attr_html: :width 600px:
#+Caption: Detail from Raphael, The School of Athens (1511)
[[../img/perplexity.jpg]]

- No update for the last two assignments yet: *If you haven't
  resubmitted yet and are at a loss: contact me!* (You got till Friday)

- Some have mended their submission ways as discussed

- Some have not (why? Time? Reassignment = rehabilitation)

- More than 40% have not submitted at all (why? Time?)

- *Submit what you have before the deadline to get a 2nd chance*!

- If you like watch my 30 minute solution video (new style) - 5 views

** Function prototypes, arguments vs. parameters
#+attr_html: :width 700px:
[[../img/basic.png]]

[[https://chat.google.com/room/AAAAcFTK-VI/4EFCXSCUCCY/4EFCXSCUCCY?cls=10][*YOU MUST ADDRESS YOUR C BASICS WEAKNESSES NOW*]]

("... or forever hold your peace").

** Review (Function prototypes)

1. What's the purpose of a function prototype?
   #+begin_quote
   The purpose of a function prototype is to declare a function to the
   compiler by declaring the header (return type, name, parameters)
   without the implementation (the function body).
   #+end_quote

2. What's a function definition?
   #+begin_quote
   A function definition is a fully implemented function, including a
   header (return type, name, parameters), and a body (code to be
   executed when the function is called).
   #+end_quote

3. Where can you define a function in a C program?
   #+begin_quote
   - If you declared its prototype before =main=, the function can be
     defined anywhere.
   - If you did not declare a prototype, the function must be defined
     before or inside the =main= function.
   #+end_quote

4. The function is defined as =void f(int a, int b)=. Can the function
   prototype be declared like this?
   #+begin_src C
     void f(int, int);
   #+end_src

   #+begin_quote
   Yes. The prototype declaration does not need to contain parameters,
   only parameter data types.
   #+end_quote

5. Can a =void= function have a =return= command?
   #+begin_quote
   No. If it's a =void= function that means that it returns nothing. A
   =return 0;= command will compile but generate a warning.
   #+end_quote

   #+begin_src C :return none
     void hello(void)
     {
       printf("hello");
       return 0;
     }
   #+end_src

   #+RESULTS:

6. How should you call a function with a =void= parameter list?
   #+begin_quote
   If it has a =void= or empty =()= parameter list, it is called without
   arguments.
   #+end_quote

   #+begin_src C :main no
     // function definition
     void hello(void)
     {
       printf("hello");
     }
     // main program
     int main (void)
     {
       hello();
       return 0;
     }
   #+end_src

   #+RESULTS:
   : hello

7. Will the following code compile?

   #+begin_src C :main no :return none
     // prototype
     void f(int a);
     // main program
     int main (void)
     {
       float b;
       f(b);
       return 0;
     }
     // function definition
     void f(int a) {}
   #+end_src

8. What does "passing arguments by value" mean?
   #+begin_quote
   "Passing arguments by value" means that arguments after a function
   call are copied so that the original arguments are not changed.
   #+end_quote

9. What do you need to change when your code block has a =main=?
   #+begin_quote
   You need to set the header argument =:main= to the value =no=.
   #+end_quote

10. How can you "break" a function without violating Syntax rules?
    #+begin_quote
    - Mismatched =return= type between declaration and =return= argument
    - Mismatched =return= type between declaration and definition
    - Missing =return= command though a =return= type is declared
    - Argument mismatch
    - Modifying =const= parameters inside the function
    #+end_quote


* Week 7 - Functions, Recursion and Pointers
#+attr_html: :width 400px:
[[../img/podcasters.png]]

*New!* 12-minute podcast on "C Arrays" (see [[https://chat.google.com/room/AAAAcFTK-VI/_Kwvf0bBml8/_Kwvf0bBml8?cls=10][chat]]) - let me know what you
think! I've already turned "C Functions" into a podcast - fun review!

*Poll!* Who has got WSL (Windows Subsystem Linux) on his Windows PC?
Enrol my help to do this (same environment as in class) any time!

Next topics:
- [ ] Passing by reference
- [ ] Compound literals
- [ ] Return and exit
- [ ] Recursion
- [ ] Quicksort algorithm

** NEXT Programming assignments are getting better!

- R code chunk (if you like how this looks, get into data science!)
  #+begin_src R :file gradesDensity.png :session *R* :results file graphics output :exports both
    grades1 <- c(0.,7.62,30.16,30.16,32.59,45.24,45.56,53.02,
                 59.26,62.22,63.17,65.4,76.19,98.33,98.41,98.89)
    grades2 <- c(20.56,35.42,42.78,48.75,52.78,57.5,69.86,70.42,
                 75.,76.11,81.53,83.19,86.39,91.25,98.47,104.29)

    ## Get the common x and y limits
    xlim <- range(c(grades1, grades2))
    ylim <- range(c(density(grades1)$y, density(grades2)$y))

    ## First plot with specified xlim and ylim
    plot(density(grades1), lwd=2, col="red",
         xlab="", ylab="", main="", xlim=xlim, ylim=ylim, yaxt="n")

    ## Overlay the second plot with the same xlim and ylim
    par(new=TRUE)
    plot(density(grades2), lwd=2, col="blue",
         xlab="Grades [%]", main="Total grades CSC 240",
         xlim=xlim, ylim=ylim, yaxt="n")

    ## Add mean lines for grades1
    abline(v=mean(grades1), col="red", lwd=2)

    ## Add mean lines for grades2
    abline(v=mean(grades2), col="blue", lwd=2)

    ## add a legend
    legend("topleft", legend=c("14-Sep", "30-Sep"),
           col=c("red", "blue"), lwd=2)
  #+end_src

  #+RESULTS:
  [[file:gradesDensity.png]]

- Many of you still have not submitted assignment 2 (= *low hanging fruit*).

- Some of you have not submitted the last 2-3 assignments (*see me!!!*).

- Some of you are still struggling with *sticking to instructions*.

- From now on I will grade what you submit *as I see it*.

- Late submissions will get *at most 50%* of the available points.

- *Late submissions for mid-term must be submitted by 12 pm on 8 Oct*

- You can always send me your solution for comment before submitting.

- Use "Hurkle-Durkle-Day" weekend to *improve your grade & skills*.

- Extended deadline for assignments 6 + 7 is *Mon 7 October (11:59pm)*

- I will video my sample solutions & create a podcast on them.


** NEXT Review (Passing by value, passing arrays)

1. What should be included in a function documentation header?
   #+begin_quote
   Name, purpose, return type, parameters, edge cases/use.
   #+end_quote
   Example:
   #+begin_example C
   // Name: power
   // Purpose: Compute power of an integer
   // Returns: integer = n-th power of integer x
   // Params: integer (base) x, integer (power) n
   #+end_example

2. What does "passing an array by reference" mean?
   #+begin_quote
   Array arguments are inherently passed by reference.

   Instead of passing a copy of the array, a pointer to the first
   element of the array is passed to the function.
   #+end_quote

3. Do changes made to the array elements inside the function affect
   the original array in the calling function?
   #+begin_quote
   Yes, any changes made to the array elements inside the function
   affect the original array:

   1. When an array is passed to a function, it "decays" into a
      pointer to its first element - only the address of that element
      is received.
   2. Modifications to the array elements change the original array,
      since no copy was made and the pointer operates on the original.
   #+end_quote

4. How does the function call to pass an array =a[10]= look like?
   #+begin_example C
     int a[10]; // array declaration
     f(a,10);  // function call
   #+end_example

5. Show this with a short example including =main= and a function!
   1) Prototye =void= function =foo= with array parameter
   2) In =main=: Define 1-dimensional array =bar[2]= and init to ={0}=
   3) In =main=: Print array elements
   4) In =main=: Call function on array
   5) In (=void=) function: change elements in array to ={1}=
   6) In main: Print array elements

   #+begin_src C :main no
     void foo(int [], int);  // 1

     int main(void)
     {
       int bar[2]={0}; // 2
       printf("%d %d\n", bar[0], bar[1]); //3
       foo(bar,2); // 4
       printf("%d %d\n", bar[0], bar[1]); //6
       return 0;
     }

     void foo(int a[], int n)
     {
       a[0] = a[1] = 1; // 5
     }
   #+end_src

   #+RESULTS:
   : 0 0
   : 1 1

   Solution:
   #+begin_src C
     void foo(int [], int); // 1

     int main(void)
     {
       int bar[2]={0}; // 2
       printf("%d %d\n",bar[0],bar[1]); // 3
       foo(bar,2); // 4
       printf("%d %d\n",bar[0],bar[1]); // 5
       return 0;
     }

     void foo(int a[], int n)
     {
       a[0] = a[1] = 1;  // 4
     }
   #+end_src

** TODO Review (Passing by value vs. reference)

1. In the =decompose= program, we split a =float= into an =int= and another
   =float= - which format specifiers are used to print these?
   #+begin_src C
     float x = 3.14159;
     float frac_part;
     int int_part;

     // split x
     int_part = (int) x;
     frac_part = x - int_part;

     // print results
     printf("x = %g, i: %d, d: %g\n", x, int_part, frac_part);
   #+end_src

   #+RESULTS:
   : x = 3.14159, i: 3, d: 0.14159

2. What if we wanted to split a =double= instead?
   #+begin_src C
     double x = 3.141592653589793;
     double frac_part;
     long int_part;

     // split x
     int_part = (long) x;
     frac_part = x - int_part;

     // print results
     printf("x = %.15f, i: %ld, d: %.15f\n", x, int_part, frac_part);
   #+end_src

   #+RESULTS:
   : x = 3.141592653589793, i: 3, d: 0.141592653589793


* Week 8 - Pointers and Arrays
* Week 9 - String Manipulation
* Week 10 - Structs, Enums, Unions
* Week 11 - Dynamic Storage Allocation
* Week 12 - Linked Lists and Doubly Linked Lists
* Week 13 - Stacks and Queues
* Week 14 - Trees and Hash Tables
* Week 15 - Heaps and Graphs / C++
