#+TITLE: NOTEBOOK - DATA STRUCTURES
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 Data Structures Lyon College Fall 2024
#+STARTUP: overview hideblocks indent entitiespretty:
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both
* Week 1
#+attr_html: :width 500px: 
[[../img/manga1.png]]

/Image: Why I like programming in C./

This week we met for our first session to get (re)acquainted with one
another, begin to learn about data structures, and understand what the
course is about.

** Why is the maximum number for a =char= type =127= and what does that mean?

It means that the computer can represent 127 characters, including
lower- and upper-case alphanumeric characters like ='a'= and ='A'=,
symbols like =+=, punctuation like =!=, and special characters like
newline, carriage return etc.

The maximum value is a constant stored in =limits.h=:
#+begin_src C :includes <float.h> <limits.h> <stdio.h>
  printf("%d\n", SCHAR_MAX);
#+end_src

#+RESULTS:
: 127

=127= is the maximum because the ASCII standard historically uses 7
bits - with 7 bits, each bit has two values so you can represent
2^7=128 different values, from 0 to 127.

To print the ASCII value of a character, print it with the =%d= format
specifier reserved for =int= (integer) values:
#+begin_src C :main yes :includes <stdio.h>
  printf("%d %d %d\n",'a','A','\\'); // the `\` must be escaped to be
  // printed as a character
#+end_src

#+RESULTS:
: 97 65 64

Later, an 8-th bit was added to extend the character set to 2^8 = 256
so that special symbols (like German umlauts =ü=, or the German =ß=) could
be represented.

* Week 2
#+attr_html: :width 500px:
[[../img/manga2.png]]

** Syllabus: About Using AI to write code for you or debug your code

I'm feeling quite strongly about this - [[https://github.com/birkenkrahe/org/blob/master/fall24/UsingAItoCode.org][here are my views]], which I
also attached to the syllabus. The short version: "Don't do it."

** Review questions (week 1)

1. What's the point of studying data structures?
   #+begin_quote
   To know the most efficient ways of storing, organizing and
   accessing data to solve a given computational problem.
   #+end_quote
2. What is a reason to use C in a course on data structures?
   #+begin_quote
   C is small and basic, and does not have many layers of abstractions
   (aka complex concepts) so that you can see and use data structures
   more directly through memory allocation and de-allocation.
   #+end_quote
3. Do you remember any of the differences between C, C++, and C#?
   #+begin_quote
   For example:
   - C allows you to manage your computer's memory directly, and was
     developed in the 1970s.
   - C++ is an Object-Oriented extension of C,and was developed in
     the 1980.
   - C# was developed by Microsoft for commercial applications, and
     was developed in the early 2000s.
   #+end_quote
4. What is the computing infrastructure that we use in this course?
   And what does each component deliver?
   #+begin_quote
   1. GitHub - Course materials repository
   2. Linux - Operating System 
   3. Emacs - Editor to create, document, and run source code
   4. Canvas - Grades, assignments, tests
   #+end_quote
5. What does "computing on the edge" refer to and do you have an
   example?
   #+begin_quote
   "Edge computing" refers to processing data close to where it is
   generated, such as sensors, IoT devices, or machines, instead of
   sending the data to a distant data center for processing. Examples:
   Autonomous vehicles, programming in space, and augmented reality.
   #+end_quote
6. How should you study for this course?
   #+begin_quote
   1) Code every day, create small examples
   2) Review lecture notes and lectures on GitHub
   3) Seek help when you need it and don't wait
   #+end_quote   
7. What are C's primitive (or built-in) data types?
   #+begin_quote
   - Integer (=int=)
   - Floating-point (=float= or =double=)
   - Character (=char=)
   - Void (=void=)
   #+end_quote
8. What does it mean that the maximum value for a =char= data type is =127=?
   #+begin_quote
   It means that the computer can represent 127 characters, including
   lower- and upper-case alphanumeric characters like ='a'= and ='A'=,
   symbols like =+=, punctuation like =!=, and special characters like
   newline, carriage return etc.

   =127= is the maximum because the ASCII standard historically uses 7
   bits - with 7 bits, each bit has two values so you can represent
   =2^7=128= different values, from 0 to 127.
   #+end_quote
9. What will this code print?
   #+begin_src C
     int i = 10000000000;
     printf("%d\n",i);
   #+end_src
   Explain the result!
   #+begin_src C
     #include <limits.h>
     printf("%d\n",INT_MAX); // Max integer: 2,147,483,647
     // All 31 bits besides the sign bit are '1' = 2^31 - 1
     // Any number above leads to overflow with ill results
   #+end_src
   In Python:
   #+begin_src python :results output :session *Python* :python python3 :exports both
     print(2**(31)-1); # 2,147,483,647
   #+end_src
10. When you see =%zu= in a C program, what do you expect?
    #+begin_src C
      const size_t INT = sizeof(int);
      printf("An integer is stored in %zu bytes.\n", INT);
      const size_t CHAR = sizeof(char);
      printf("A character is stored in %zu bytes.\n", CHAR);
    #+end_src

    #+RESULTS:
    : An integer is stored in 4 bytes.
    : A character is stored in 1 bytes.
   
** Orientation II: Course Content (cont'd) & Development Tools
#+attr_html: :width 600px:
#+CAPTION: Still Life With a Volume of Wither's Emblemes by Edward Collier (1696)
[[../img/tools.png]]

- [X] Derived data types
- [X] Data structures
- [X] Linux (with practice in Google Cloud Shell)
- [X] Emacs (with practice & assignment)
- [X] GitHub (with assignment)

** Assignments (Details in Canvas) by next week (Tuesday)

The first one of these is similar to our practice in class (in Google
Cloud Shell), while the second one involves many more steps and
requires more independence.

1. Solve any one of the 10 programming entry problems and submit your
   solution as an Emacs Org-mode file, including:
   1) A file header:
      #+begin_example
      #+TITLE: [give it a title]
      #+AUTHOR: [your name] (pledged)
      #+SUBTITLE: CSC 240 - Data Structures with C++ - Lyon College, Fall'24
      #+STARTUP: overview hideblocks indent
      #+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output
      #+end_example
   2) An Org-mode headline with the program name, e.g. =* COOL PROGRAM=
   3) A short description of what the program does
   4) A code block
   5) Output as requested
   6) A short text reflecting on your experience - especially any
      difficulties you had during solving the exercise.

   To download the file from Google Cloud Shell, ="Open editor"= at the
   top, then open the explorer (="Home directory"=), right-click on the
   file name and =download= it to your PC.

   If your Emacs skills are rusty, you may need to complete [[https://tinyurl.com/emacs-tutor2][the Emacs
   tutorial]] (perhaps for the second time). See also the two videos
   that I made, linked at the start of the tutorial.

   The screenshot shows a sample file that is built exactly like the
   Org-mode file that you should submit (except with different code of
   course):
   #+attr_html: :width 600px:
   [[../img/sample.png]]

2. Complete the Hello World Project in GitHub and share a screenshot
   of your public GitHub repo with the hello-world repository.

   You find detailed step-wise instructions [[https://github.com/birkenkrahe/alg1/blob/main/org/0_overview.org#github-hello-world-exercise][here]] at the end of these
   lecture notes in GitHub.

** Review questions:

1. Examples for digital-to-analog, and for analog-to-digital
   conversion? Why is this relevant to data structures?
   #+begin_quote
   - Digital-to-analog: Player piano 
   - Analog-to-digital: Voice recording
   - Relevance: Data structures are integral to the efficient storage,
     processing, compression, transmission, and conversion of digital
     data derived from analog signals. From basic arrays that store
     sample data to complex trees and graphs used in compression and
     error detection, they ensure that the digitization process is
     accurate, efficient, and reliable.
   #+end_quote
2. Explain this (full sentence): =const float PI = 3.14;=
   #+begin_quote
   Statement: Assign the value 3.14 to a constant floating-point
   variable =PI=
   #+end_quote
3. Explain this (full sentence): =#define PI 3.14=
   #+begin_quote
   Preprocessor directive: Replace the expression =PI= everywhere by the
   floating-point value =3.14=
   #+end_quote
4. What is Google Cloud Shell?
   #+begin_quote
   Google Cloud Shell is a command-line application that gives you
   access to a virtual Ubuntu 22.04 LTS Linux distribution.
   #+end_quote
5. What does the =gdb= debugger allow you to do?
   #+begin_quote
   The =gdb= program allows you to step through your program as it runs,
   and get information about variables and functions.
   #+end_quote
6. What do you need to do to use =gdb=?
   #+begin_quote
   You need to compile the source code with =gcc= and the =-g= flag, for
   example: =gcc main.c -o main -g= generates a debuggable executable
   =main=. Now you can start the debugger with =gdb main=.
   #+end_quote   

** Introduction to Data Structures (Lecture/Codealong)

* Week 3
#+attr_html: :width 400px:
[[../img/Les_Voyageurs_Bruno_Catalano.jpg]]


