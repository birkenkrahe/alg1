#+TITLE: NOTEBOOK - DATA STRUCTURES
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 Data Structures Lyon College Fall 2024
#+STARTUP: overview hideblocks indent entitiespretty:
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both
* Week 1 - Why You Are Here
#+attr_html: :width 500px:
[[../img/manga1.png]]

/Image: Why I like programming in C./

This week we met for our first session to get (re)acquainted with one
another, begin to learn about data structures, and understand what the
course is about.

** Why is the maximum number for a =char= type =127= and what does that mean?

It means that the computer can represent 127 characters, including
lower- and upper-case alphanumeric characters like ='a'= and ='A'=,
symbols like =+=, punctuation like =!=, and special characters like
newline, carriage return etc.

The maximum value is a constant stored in =limits.h=:
#+begin_src C :includes <float.h> <limits.h> <stdio.h>
  printf("%d\n", SCHAR_MAX);
#+end_src

#+RESULTS:
: 127

=127= is the maximum because the ASCII standard historically uses 7
bits - with 7 bits, each bit has two values so you can represent
2^7=128 different values, from 0 to 127.

To print the ASCII value of a character, print it with the =%d= format
specifier reserved for =int= (integer) values:
#+begin_src C :main yes :includes <stdio.h>
  printf("%d %d %d\n",'a','A','\\'); // the `\` must be escaped to be
  // printed as a character
#+end_src

#+RESULTS:
: 97 65 64

Later, an 8-th bit was added to extend the character set to 2^8 = 256
so that special symbols (like German umlauts =ü=, or the German =ß=) could
be represented.

* Week 2 - What Data Structures Are About
#+attr_html: :width 500px:
[[../img/manga2.png]]

** Syllabus: About Using AI to write code for you or debug your code

I'm feeling quite strongly about this - [[https://github.com/birkenkrahe/org/blob/master/fall24/UsingAItoCode.org][here are my views]], which I
also attached to the syllabus. The short version: "Don't do it."

** Review questions (week 1)

1. What's the point of studying data structures?
   #+begin_quote
   To know the most efficient ways of storing, organizing and
   accessing data to solve a given computational problem.
   #+end_quote
2. What is a reason to use C in a course on data structures?
   #+begin_quote
   C is small and basic, and does not have many layers of abstractions
   (aka complex concepts) so that you can see and use data structures
   more directly through memory allocation and de-allocation.
   #+end_quote
3. Do you remember any of the differences between C, C++, and C#?
   #+begin_quote
   For example:
   - C allows you to manage your computer's memory directly, and was
     developed in the 1970s.
   - C++ is an Object-Oriented extension of C,and was developed in
     the 1980.
   - C# was developed by Microsoft for commercial applications, and
     was developed in the early 2000s.
   #+end_quote
4. What is the computing infrastructure that we use in this course?
   And what does each component deliver?
   #+begin_quote
   1. GitHub - Course materials repository
   2. Linux - Operating System
   3. Emacs - Editor to create, document, and run source code
   4. Canvas - Grades, assignments, tests
   #+end_quote
5. What does "computing on the edge" refer to and do you have an
   example?
   #+begin_quote
   "Edge computing" refers to processing data close to where it is
   generated, such as sensors, IoT devices, or machines, instead of
   sending the data to a distant data center for processing. Examples:
   Autonomous vehicles, programming in space, and augmented reality.
   #+end_quote
6. How should you study for this course?
   #+begin_quote
   1) Code every day, create small examples
   2) Review lecture notes and lectures on GitHub
   3) Seek help when you need it and don't wait
   #+end_quote
7. What are C's primitive (or built-in) data types?
   #+begin_quote
   - Integer (=int=)
   - Floating-point (=float= or =double=)
   - Character (=char=)
   - Void (=void=)
   #+end_quote
8. What does it mean that the maximum value for a =char= data type is =127=?
   #+begin_quote
   It means that the computer can represent 127 characters, including
   lower- and upper-case alphanumeric characters like ='a'= and ='A'=,
   symbols like =+=, punctuation like =!=, and special characters like
   newline, carriage return etc.

   =127= is the maximum because the ASCII standard historically uses 7
   bits - with 7 bits, each bit has two values so you can represent
   =2^7=128= different values, from 0 to 127.
   #+end_quote
9. What will this code print?
   #+begin_src C
     int i = 10000000000;
     printf("%d\n",i);
   #+end_src
   Explain the result!
   #+begin_src C
     #include <limits.h>
     printf("%d\n",INT_MAX); // Max integer: 2,147,483,647
     // All 31 bits besides the sign bit are '1' = 2^31 - 1
     // Any number above leads to overflow with ill results
   #+end_src
   In Python:
   #+begin_src python :results output :session *Python* :python python3 :exports both
     print(2**(31)-1); # 2,147,483,647
   #+end_src
10. When you see =%zu= in a C program, what do you expect?
    #+begin_src C
      const size_t INT = sizeof(int);
      printf("An integer is stored in %zu bytes.\n", INT);
      const size_t CHAR = sizeof(char);
      printf("A character is stored in %zu bytes.\n", CHAR);
    #+end_src

    #+RESULTS:
    : An integer is stored in 4 bytes.
    : A character is stored in 1 bytes.

** Orientation II: Course Content (cont'd) & Development Tools
#+attr_html: :width 600px:
#+CAPTION: Still Life With a Volume of Wither's Emblemes by Edward Collier (1696)
[[../img/tools.png]]

- [X] Derived data types
- [X] Data structures
- [X] Linux (with practice in Google Cloud Shell)
- [X] Emacs (with practice & assignment)
- [X] GitHub (with assignment)

** Assignments (Details in Canvas) by next week (Tuesday)

The first one of these is similar to our practice in class (in Google
Cloud Shell), while the second one involves many more steps and
requires more independence.

1. Solve any one of the 10 programming entry problems and submit your
   solution as an Emacs Org-mode file, including:
   1) A file header:
      #+begin_example
      #+TITLE: [give it a title]
      #+AUTHOR: [your name] (pledged)
      #+SUBTITLE: CSC 240 - Data Structures with C++ - Lyon College, Fall'24
      #+STARTUP: overview hideblocks indent
      #+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output
      #+end_example
   2) An Org-mode headline with the program name, e.g. =* COOL PROGRAM=
   3) A short description of what the program does
   4) A code block
   5) Output as requested
   6) A short text reflecting on your experience - especially any
      difficulties you had during solving the exercise.

   To download the file from Google Cloud Shell, ="Open editor"= at the
   top, then open the explorer (="Home directory"=), right-click on the
   file name and =download= it to your PC.

   If your Emacs skills are rusty, you may need to complete [[https://tinyurl.com/emacs-tutor2][the Emacs
   tutorial]] (perhaps for the second time). See also the two videos
   that I made, linked at the start of the tutorial.

   The screenshot shows a sample file that is built exactly like the
   Org-mode file that you should submit (except with different code of
   course):
   #+attr_html: :width 600px:
   [[../img/sample.png]]

2. Complete the Hello World Project in GitHub and share a screenshot
   of your public GitHub repo with the hello-world repository.

   You find detailed step-wise instructions [[https://github.com/birkenkrahe/alg1/blob/main/org/0_overview.org#github-hello-world-exercise][here]] at the end of these
   lecture notes in GitHub.

** Review questions:

1. Examples for digital-to-analog, and for analog-to-digital
   conversion? Why is this relevant to data structures?
   #+begin_quote
   - Digital-to-analog: Player piano
   - Analog-to-digital: Voice recording
   - Relevance: Data structures are integral to the efficient storage,
     processing, compression, transmission, and conversion of digital
     data derived from analog signals. From basic arrays that store
     sample data to complex trees and graphs used in compression and
     error detection, they ensure that the digitization process is
     accurate, efficient, and reliable.
   #+end_quote
2. Explain this (full sentence): =const float PI = 3.14;=
   #+begin_quote
   Statement: Assign the value 3.14 to a constant floating-point
   variable =PI=
   #+end_quote
3. Explain this (full sentence): =#define PI 3.14=
   #+begin_quote
   Preprocessor directive: Replace the expression =PI= everywhere by the
   floating-point value =3.14=
   #+end_quote
4. What is Google Cloud Shell?
   #+begin_quote
   Google Cloud Shell is a command-line application that gives you
   access to a virtual Ubuntu 22.04 LTS Linux distribution.
   #+end_quote
5. What does the =gdb= debugger allow you to do?
   #+begin_quote
   The =gdb= program allows you to step through your program as it runs,
   and get information about variables and functions.
   #+end_quote
6. What do you need to do to use =gdb=?
   #+begin_quote
   You need to compile the source code with =gcc= and the =-g= flag, for
   example: =gcc main.c -o main -g= generates a debuggable executable
   =main=. Now you can start the debugger with =gdb main=.
   #+end_quote

** Introduction to Data Structures (Lecture) I (handout)

* Week 3 - The Concert in the Egg Begins
#+attr_html: :width 600px:
#+caption: The Concert in the Egg ca. 1550 AD
[[../img/TheConcertInTheEgg.jpg]]

See on [[https://youtu.be/vfUAs7YbxlE?si=Rbw8egV_s_XQ6DGP][YouTube]]: The music in the painting, "Toutes les nuits que sans
vous je me couche" (Every night that I go to bed without you) by
Thomas Crecquillan (1549).

- [X] Setup: Linux server
- [X] Review: Intro to data structures
- [X] Array basics
- [ ] Quiz 2 is live (some missed Quiz 1)
- [ ] Graded: first two assignments
- [ ] Shared: sample solutions [[https://github.com/birkenkrahe/alg1/blob/main/org/alg1_entry_code_solutions.org][for C++]] and [[https://github.com/birkenkrahe/alg1/blob/main/org/alg1_entry_code_solutions_C.org][for C]]
- [ ] Review: Array basics (with practice)
- [ ] Array as data structure (code along lecture)

* DONE Linux server has arrived

- You should have received your VM server address and password

- Start "Remote Desktop Protocol" on your (Windows) PC

- Enter the server name (e.g. =cslinux01.lyon.edu=) => =Connect=

- Login the =Xorg= session with username =firstname.lastname=, pw

- *Do not shut down or log out of the VM but only close the window*

- Currently access only from Lyon 104 but other subnets will be added.

- IT will give me admin access and set VMs to auto-boot soon.

* DONE Review: Introduction to Data Structures I

1) Define "data structure"
   #+begin_quote
   A data structures is a way of organizing and storing data in a
   computer using a programming language.
   #+end_quote
2) Do different programming languages have different data structures?
   #+begin_quote
   Yes, different programming languages have different data
   structures. Some are built in, others have to be user-defined.
   #+end_quote
3) Name at least three different data structures!
   #+begin_quote
   1. Arrays, vectors, matrices
   2. Lists, Dictionaries
   3. Structures, classes
   4. Enumerations, strings
   5. Data frames, tables
   #+end_quote
4) Define "algorithm".
   #+begin_quote
   A step-by-step procedure to solve a problem with or without a
   computer, for example searching, sorting, printing.
   #+end_quote
5) What is the most common data structure in C, Python, R?
   #+begin_quote
   1. C: array
   2. Python: list
   3. R: vector
   #+end_quote

* DONE Introduction to Data Structures (Lecture) II
* DONE Array basics (review)
* DONE On the Programming Assignments
#+attr_html: :width 400px: 
#+caption: Portrait de femme au col d'hermine (Olga) - Picasso (1923)
[[../img/picasso.png]]

- This term, I am implementing a new rubric for grading your
  programming assignments. Check it out in the syllabus.

- The core message: complete the assignments on time and to the letter
  to get 100% of the points. Don't, and you lose points.

- For this first assignment, you can fix your mistakes and resubmit
  for full points. Only a handful completed all of the simple tasks.

- Make sure to read the full assignment and satisfy it to the
  letter. In this case, there was a complete sample solution available
  ([[https://github.com/birkenkrahe/alg1/blob/main/org/sample.org][GitHub or raw org]]), and all you had to do was imitate it.

* DONE Review: Intro to data structures / array basics

We'll combine this review with some light coding. Useful also for the
2nd quiz where I've used some of these examples.

- Create an .org file
- Add at the top:
  #+begin_example
  #+property: header-args:C :main yes :includes <stdio.h> :results output
  #+end_example
- Run this line with C-c C-c
- Test it by creating a code block with: <s <TAB>
- In the code block write =printf("Hello, beautiful!");=
- Run this thing: C-c C-c 


1. What distinguishes the choice of different data structures?
   #+begin_quote
   - Performance (speed, for example when searching through data)
   - Standardization (adherence to coding and data standards)
   - Portability (ability to run code anywhere)
   #+end_quote

2. You declare an array =A= in =main=. Where is this array stored in
   memory?
   #+begin_quote
   In the stack, because it is a local variable that disappears as
   soon as the =main= function is finished (when =return 0= is reached).
   #+end_quote
   Code example:
   #+begin_src C 
     int main(void)
     { 
       int A[5]; // array declaration
       return 0;
     }
   #+end_src

   #+RESULTS:

3. Which parts of the memory are read-only?
   #+begin_quote
   The memory sections for =const= "variables", and for machine code.
   #+end_quote
   Code example:
   #+begin_src C :results none
     const float pi = 3.1459; // stored in read-only memory
     pi++;  // pi = pi + 1 - generates error
   #+end_src

4. What is the memory "heap"?
   #+begin_quote
   The heap is memory reserved for "dynamically allocated" variables -
   variables whose memory is determined during run-time rather than
   compile-time. Such memory is allocated using the =malloc= function.
   #+end_quote
   Code example:
   #+begin_src C :includes <stdlib.h> :results none

     int *A = (int*)malloc(5 * sizeof(int)); // Allocate memory for 5 integers
     // You can now assign values to A[0] through A[4]
     free(A); // Free the allocated memory
     
   #+end_src

5. What are the stages of solving a computational problem?
   #+begin_quote
   1) Understanding the problem
   2) Identify solution (pseudocode)
   3) Identify data structures
   4) Implement solution
   5) Check solution (rinse & repeat if necessary)
   #+end_quote

6. Define "Abstract Data Type" and give at least one example
   #+begin_quote
   An abstract data type is a data structure together with basic
   operations (creation, deletion, insertion, extraction etc.)

   Examples:
   1) user-defined classes (=dog=), methods =doTricks=, =sleep=
   2) built-in arrays with element insertion, extraction
   3) linked lists with item insertion, removal
   #+end_quote

7. How would you declare and initialize an integer array of five
   elements with zero?
   #+begin_src C
     // Explicit initialization
     int A[5]; A[0]=A[1]=A[2]=A[3]=A[4]=0;
     // Implicit initialization
     int B[5] = {0};
     // Loop initialization
     int i; int C[5];
     for (i = 0; i < 5; i++)
       C[i] = 0;
     // Check results
     int j;
     for (j=0;j<5;j++) {
       printf("A[%d]: %d ", j, A[j]);
       printf("B[%d]: %d ", j, B[j]);
       printf("C[%d]: %d \n", j, C[j]);
      }
   #+end_src

   #+RESULTS:
   : A[0]: 0 B[0]: 0 C[0]: 0 
   : A[1]: 0 B[1]: 0 C[1]: 0 
   : A[2]: 0 B[2]: 0 C[2]: 0 
   : A[3]: 0 B[3]: 0 C[3]: 0 
   : A[4]: 0 B[4]: 0 C[4]: 0 

8. What do you get when you print undeclared array elements?
   #+begin_quote
   You get 'undefined behavior'. Example: change the upper limit of
   the =Check results= loop from =5= to =10=.
   #+end_quote
   #+begin_src C
     // Explicit initialization
     int A[5]; A[0]=A[1]=A[2]=A[3]=A[4]=0;
     // Implicit initialization
     int B[5] = {0};
     // Loop initialization
     int i; int C[5];
     for (i = 0; i < 5; i++)
       C[i] = 0;
     // Check results
     int j;
     for (j=0;j<7;j++) {
       printf("A[%d]: %d ", j, A[j]);
       printf("B[%d]: %d ", j, B[j]);
       printf("C[%d]: %d \n", j, C[j]);
      }
   #+end_src

   #+RESULTS:
   : A[0]: 0 B[0]: 0 C[0]: 0 
   : A[1]: 0 B[1]: 0 C[1]: 0 
   : A[2]: 0 B[2]: 0 C[2]: 0 
   : A[3]: 0 B[3]: 0 C[3]: 0 
   : A[4]: 0 B[4]: 0 C[4]: 0 
   : A[5]: 0 B[5]: 0 C[5]: 0 
   : A[6]: -1412640919 B[6]: -1075053569 C[6]: -1533928960 
9. When is the length of an array determined?
   #+begin_quote
   When the length of an array is determined depends on type of array:
   if it is a regular array, it is determined at compile time and
   cannot be changed when the program is run. If it is a
   variable-length array, or if it is a dynamically allocated array,
   its length is determined when the program is run ("at run-time").
   #+end_quote

10. When would it be useful to determine the length of an array when
    the program is running?
    #+begin_quote
    For example when the size of the data is user-driven: if a user
    specifies how many numbers they want to input, the array size must
    be determined based on their input.
    #+end_quote
    Code example for a variable-length based array:
    #+begin_src C :tangle main.c

      int n; // user-defined array length
      scanf("%d",&n); // get the length n from keyboard
      int A[n]; // Variable-Length Array
      int i;
      for(i=0;i<n;i++) {
        A[i]=i*i;  // assign value
        printf("%d ",A[i]); // print value
       }
    #+end_src

    #+RESULTS:

    Run tangled source code file:
    #+begin_src bash :results output
      gcc main.c -o main
      echo 10 | ./main
    #+end_src

    #+RESULTS:
    : 0 1 4 9 16 25 36 49 64 81 

* Week 4

- [ ] Quiz 2 to be completed
- [ ] Two new programming assignments
- [ ] If you're stumped - contact me

* DONE Reviewing the Array Basics Review

1. If =A= is an array, what is =&A=?
   #+begin_quote
   If =A= is an array, then =&A= is the address of =A[0]=, the first element
   of =A=.
   #+end_quote
   #+begin_src C
     int A[2] = {100,200}; // declare & initialize array of two elements
     printf("%p\n%p", &A, &A[0]); // print address-of-A and address-of-A[0]
   #+end_src

   #+RESULTS:
   : 0x7ffcd3c67d20
   : 0x7ffcd3c67d20

2. How is the memory of an array organized?
   #+begin_quote
   The memory of an array is contiguous in memory, that is that the
   memory cells that hold array values are placed next to one another
   (this is the basis of *pointer arithmetic*). For a 2-dim array (aka
   matrix), the elements are stored in row-wise fashion.
   #+end_quote
   #+begin_src C
     int A[2][2] = {{1,2},{3,4}};
     printf("%p %p %p %p\n",       // print addresses as hexadecimals
            &A[0][0], &A[0][1],
            &A[1][0], &A[1][1]);
     printf("%d %d %d %d\n",       // print addresses as decimals
            &A[0][0], &A[0][1],
            &A[1][0], &A[1][1]);
          #+end_src
   
3. What's pointer arithmetic?
   #+begin_quote
   Arithmetic with memory positions. If =p= is an integer pointer, then
   =*(p + 1)= moves the pointer =p= by =1= integer (4 bytes), e.g. from
   memory position 100 to 104, because =sizeof(int)= is 4 bytes.
   #+end_quote
   
4. What's a variable-length array?
   #+begin_quote
   An array whose length is determined at run-time. It cannot be
   initialized in the source code, only declared, and its length comes
   from the user when the program runs.
   #+end_quote

5. What does =:main no= mean as a header argument?
   #+begin_quote
   It does not add =int main(void) { ... return 0; }= to the source
   code.
   #+end_quote

6. What does =:includes <limits.h>= mean as a header argument?
   #+begin_quote
   It adds =#include <limits.h>= to the C source code at the top.
   #+end_quote
   
7. In Linux, how can you find out how much memory is available?
   #+begin_src bash :results output :exports both
     free -h  # give me the free memory for humans
   #+end_src

   #+RESULTS:
   :                total        used        free      shared  buff/cache   available
   : Mem:           7.5Gi       2.3Gi       756Mi       617Mi       4.5Gi       4.3Gi
   : Swap:          2.0Gi          0B       2.0Gi

8. What is =bash=? What does it do?
   #+begin_quote
   =bash(1)= is a Linux shell program. It allows you to run other
   programs like =gcc= or =echo= or =free=. 'Run X on the shell/in the
   terminal' means 'let =bash= run it'. Some commands, like =cd=
   #+end_quote
  Example:
  #+begin_src bash :results output
  gcc --version
  #+end_src

9. What does "piping input into =main=" mean? Example?
   #+begin_quote
   It's a way of passing output from one program to another
   program. Example: in the command =echo 10 | ./main=, the number 10 is
   passed to a program called =main=. If =main= cannot use the number,
   it is simply ignored by =main=.
   #+end_quote

   An example that only works if you have a =main.c= program that takes
   the number =10= as a keyboard input:
   #+begin_src bash
     gcc main.c -o main
     echo 10 | ./main
   #+end_src

   #+RESULTS:
   : 0 1 4 9 16 25 36 49 64 81
   
10. What's wrong with this header argument?
    #+begin_example
    #+PROPERTY: header-args:C :main yes :includes <stdio.h> results: output
    #+end_example
    Answer: The =results= argument needs a colon in front of it:
      #+begin_example
    #+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output
    #+end_example

* IN PROGRESS Arrays as data structures (handout)
#+attr_html: :width 600px: 
#+caption: M C Escher
[[../img/escher.jpg]] 

- Continue with the "reverse array elements" program ([[file:2_arrays_codealong.org][code along]])
  

