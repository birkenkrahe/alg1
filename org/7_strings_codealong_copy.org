#+title: Strings
#+author: Marcus Birkenkrahe (pledged)
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> <time.h> :results output :exports both :comments none :noweb yes
* DONE Exercises: Initializing String Variables

** Exercise 1: Basic Initialization

- Declare a character (=char=) array called =greeting= with a length of 10
  and initialize it with the string "Hello" and use =printf= to print it.

  #+begin_src C
    char greeting[10]="Hello";
    printf("%s\n", greeting);
  #+end_src

  #+RESULTS:
  : Hello

** Exercise 2: Exact Fit without Null Character

- Declare a character array =month= with a length of 5 and initialize it
  with the string ="June"=. Print the string and observe the result.

- Modify the code to add a =\0= at the end of =month= and print it again.

  #+begin_src C
    char month[5]="June";
    printf("%s\n", month);
  #+end_src

  #+RESULTS:
  : June

** Exercise 3: Overfilled Array

- Declare a character array =day= with length 3 and try initializing it
  with the string ="Mon"=. Print the array using =printf=.

  #+begin_src C
    char day[3]="Mon";
    printf("%s\n",day);
  #+end_src

  #+RESULTS:
  : Mon

** Exercise 4: Using =sizeof= with Strings
- Declare =char name[] = "Student";=. Print the size of =name= using
  =sizeof= and compare it with the length of the string.

  #+begin_src C
    char name[]="Student"; // compiler substitutes the length
    printf("Size of name: %zu\n", sizeof(name));
  #+end_src

  #+RESULTS:
  : Size of name: 8

* DONE Exercises: Character Arrays versus Character Pointers
** Exercise 5: String Array vs. Pointer Modification Attempt

- Declare =char message_a[] = "Welcome";= and =char *message_p =
  "Welcome";=.

- Try modifying the first character of each: =message_a[0] = 'w';= and
  =message_p[0] = 'w';=.

  #+begin_src C
    char msg_a[] = "Welcome";
    char *msg_p = "Welcome";

    msg_a[0] = 'w';
    //msg_p[0] = 'w';
  #+end_src

** Exercise 6: Changing the Pointer Target

- Initialize two character arrays =char date1[] = "June 14";= and =char
  date2[] = "July 15";=.

- Declare a character pointer =char *p= and make it point to
  =date1=. Print the string using =p=, then change =p= to point to =date2= and
  print again.

  #+begin_src C
    char date1[] = "June 14";
    char date2[] = "July 15";
    char *p = date1;   // p points at date1[0]
    printf("%s\n", p);
    p = date2;   // p now points at date2[0]
    printf("%s\n", p);
  #+end_src

  #+RESULTS:
  : June 14
  : July 15

** Exercise 7: Pointer Initialization and Dereferencing

- Declare a character array =char city[] = "Paris";= and a character
  pointer =char *ptr=.

- Initialize =ptr= to point to =city= and print the first character of
  =city= by dereferencing =ptr= with =*ptr= and =ptr[0]=.

  #+begin_src C
    char city[] = "Paris";
    char *ptr = city;
    printf("First character: %c %c\n", *ptr, ptr[0]);
  #+end_src

  #+RESULTS:
  : First character: P P

** Exercise 8: Uninitialized Pointer Error Simulation

- Declare a character pointer =char *uninitialized_ptr;=. Attempt to
  assign =uninitialized_ptr[0] = 'X';=.

  #+begin_src C :results none
    char *ptr;
    ptr[0] = 'X';
  #+end_src

* DONE Exercises: Writing strings
** Exercise 9: Simple String Output

- *Problem*: Write a program that stores the string ="Learning C is
  fun!"= in a variable and prints it to the console.

- *Solution*:
  #+begin_src C
    char str[]="Learning C is fun!";
    printf("%s",str);
  #+end_src

  #+RESULTS:
  : Learning C is fun!

** Exercise 10: Partial String Output

- *Problem*: Modify the previous program to only print the first 10
  characters of the string.

- *Solution*:
  #+begin_src C
    char str[]="Learning C is fun!";
    printf("%.10s\n", str);     // prints 'Learning C'
  #+end_src

  #+RESULTS:
  : Learning C

** Exercise 11: String Formatting with Field Width
- *Problem*: Use the string ="C programming"= and:
  1. Print only the first 5 characters in a field of width 8,
     right-aligned.
  2. Print only the first 5 characters in a field of width 8,
     left-aligned.
  3. Print a ruler (=|....|....|....|=) to check your results.

- *Solution*:
  #+begin_src C
    char str[] = "C programming";
    puts("|....|....|....|");
    printf("%13.5s\n", str);  // Right-aligned
    printf("%-8.5s\n", str); // Left-aligned
  #+end_src

  #+RESULTS:
  : |....|....|....|
  :         C pro
  : C pro   

** Exercise 12: Safe String Input with fgets

- *Problem*: Write a program that reads a line of text using =fgets= and
  then prints it. Use the =:cmdline < strinput= header argument to
  stream the data to the program.

- String input:
  #+begin_src bash :results output
    echo "Write a program that reads a line of text" > strinput
    cat strinput
  #+end_src

  #+RESULTS:
  : Write a program that reads a line of text

- *Solution*:
  #+begin_src C :cmdline < strinput
    char str[80];
    fgets(str,sizeof(str),stdin);
    printf("%s",str);
  #+end_src

  #+RESULTS:
  : Write a program that reads a line of text

* TODO Exercises: Reading strings
** Exercise 13: Printing on new lines

- *Problem*: Write a program that stores ="Hello, C!"= in a string
  variable. Use a loop to print each character in the string on a
  new line.

- *Solution*:

  #+begin_src C

  #+end_src

** Exercise 14: Reading Strings Character-by-Character

- *Problem*: Write a program that stores ="Hello, C!"= in a string
  variable. Use a loop to print each character in the string on a new
  line.

- *Solution*:
  #+begin_src C

  #+end_src

** Exercise 15: Pointer Arithmetic in Strings

- *Problem*: Modify the =count_spaces= function to use pointer arithmetic
  instead of array indexing.
  
- *Solution*:
  #+begin_src C
    #include <stdio.h>

    int count_spaces(const char *s) {
      int count = 0;
      // ...
      return count;
    }

    int main() {
      char str[] = "Can you count spaces?";
      printf("Spaces in \"%s\" = %d\n", str, count_spaces(str));
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Spaces in "Can you count spaces?" = 0

** Exercise 16: Exploring scanf and Strings
- *Problem*: Write a program that reads a word using =scanf= and prints
  it. Modify the program to only allow up to 10 characters to be read.

- *Solution*:
  #+begin_src C

  #+end_src

* TODO Exercise: Pointer and string literal argument call

Modify =count_spaces= function call with pointer variable and with string literal.

- Function call with pointer variable:
  #+begin_src C
    int count_spaces(const char *s) // const prevents modification of
    // whatever s points to but not s itself
    {
      int count = 0;
      for ( ; *s != '\0'; s++) // no need for start index counter
        if (*s == ' ')
          count++;
      return count;
    }

    int main(void)
    {

      // str decays to pointer to str[0] upon function call

      return 0;
    }
  #+end_src

- Function call with string literal:
  #+begin_src C
    int count_spaces(const char *s) // const prevents modification of
    // whatever s points to but not s itself
    {
      int count = 0;
      for ( ; *s != '\0'; s++) // no need for start index counter
        if (*s == ' ')
          count++;
      return count;
    }

    int main(void)
    {
      // str decays to pointer to str[0] upon function call

      return 0;
    }
  #+end_src

* TODO Exercise: C string library functions

** =strcpy= exercise

Write a C program that initializes a source string with the value
"Hello, World!" and uses =strcpy= to copy this string into an empty
destination string. Print the destination string after copying.

#+begin_src C :main yes :includes <stdio.h> <string.h>

#+end_src

** =strlen= exercise

Write a C program that initializes a string with the value "OpenAI"
and uses =strlen= to find and print the length of this string.

#+begin_src C :main yes :includes <stdio.h> <string.h>

#+end_src

** =strcat= exercise

Write a C program that initializes two strings: =str1= with "Hello, "
and =str2= with "world!". Use =strcat= to concatenate =str2= to =str1= and
print the resulting string.

#+begin_src C :main yes :includes <stdio.h> <string.h>

#+end_src

** =strcmp= exercise

Write a C program that initializes two strings: =str1= with "apple" and
=str2= with "orange". Use =strcmp= to compare the two strings and print
whether =str1= is less than, equal to, or greater than =str2=.

#+begin_src C :main yes :includes <stdio.h> <string.h>

#+end_src



