#+title: Structures - code along
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> <time.h> :results output :exports both :comments none :noweb yes
* Motivation

There are three user-defined data structures that help organize data
and group them logically:

| Data Structure | Explanation                                                   |
|----------------+---------------------------------------------------------------|
| =struct=         | Different types. Each member has its own memory location.     |
| =enum=           | Assigns names to integer constants. All members are integers. |
| =union=          | Groups variables, members share the same memory location.     |

| Data Structure | Use Cases                                                     |
|----------------+---------------------------------------------------------------|
| =struct=         | Complex objects like points, employees, or students.          |
| =enum=           | Fixed sets of values (days of the week, states, error codes). |
| =union=          | Optimizing memory usage.                                      |

Structures are by far the most important so we'll spend most of our
time on them.

* First examples

  - Structure example: A point is defined as a pair of (x,y)
    values. Once the =struct= is defined, =Point= can be used like any other
    data type.
    #+begin_src C
      // Declare Point structure
      struct Point {
        int x;   // x attribute of Point
        int y;   // y attribute of Point
      };
      // Main program
      int main()
      {
        // define a Point
        struct Point p1={10,20};  // also called an "instance"

        // print the point values
        printf("Point: (%d, %d)\n", p1.x, p1.y);

        return 0;
      }
    #+end_src

    #+RESULTS:
    : Point: (10, 20)

  - Enumeration example: The =enum= =Day= is an integer type whose values
    are named.
    #+begin_src C
      enum Day { MON, TUE, WED, THU, FRI, SAT, SUN };

      int main() {
        enum Day today = FRI;
        printf("Today is day number: %d\n", today); // Output: 2 (WED)
        return 0;
      }
    #+end_src

    #+RESULTS:
    : Today is day number: 4

  - Union example: Similar to a structure except that its members share
    the same storage so that only one member can be stored at a time.
    #+begin_src C
      // declare data Union
      union Data {
        int i;
        float f;
        char str[20];
      };
      // Main program
      int main() {
        // Define data as Data
        union Data data;  // `data` is a `Data` object

        // Assign data values
        data.i = 42;
        data.f = 3.14f;
        strcpy(data.str, "hello world");

        // Print data values
        printf("Integer: %d\nFloat: %g\nString: %s.\n",
               data.i, data.f, data.str);
        return 0;
      }
    #+end_src

    #+RESULTS:
    : Integer: 1819043176
    : Float: 1.14314e+27
    : String: hello world.

* Structure variables

- So far, we've only covered one data structure, the array. Array
  elements all must have the same type and they can be subscripted.

- Structure members can have different types, and they have names,
  which we use rather than their position.

- Most high level languages provide this feature:
  1. In C++, the =class= is an extension of the =struct= with the
     difference that its members are =private= by default.

  2. In R, the =list= is a =struct= without methods (with with =apply=), and
     custom methods can be defined.
     
  3. In SQL, the =table= schema is a =struct= (without methods). Foreign
     keys link tables like pointers in C.

* Declaring structure variables

- Structures are for storing a collection of related data items - for
  example parts in a warehouse, represented by:
  1) Part =number= (integer)
  2) Part =name= (string)
  3) Number of parts =on_hand= (integer)

- In code:
  #+name: parts
  #+begin_src C :results none
    struct {   // anonymous parts structure (non-tagged)
      int number;   // part number menber
      char name[25];  // part name member
      int on_hand; // part on hand member
    } part1, part2; // define two parts (structure variables)
  #+end_src

- Members are stored in memory in the order in which they are
  declared: [[https://github.com/birkenkrahe/alg1/blob/main/img/struct.png][See image]]

- Here, =number= and =on_hand= occupy 4 bytes (=int=), and =name= occupies 25
  bytes (=char= has 1 byte x 25).

- Usually, structures are represented by adjacent vertical or
  horizontal boxes:  [[https://github.com/birkenkrahe/alg1/blob/main/img/struct2.png][See image]]

- Structure scope: Each structure represents a new block scope, and
  its names will not conflict with other names in a program. This is
  also called a =namespace=.

- You remember this concept from beginner's C++: By declaring the
  namespace =std= at the start, you don't have to write =std::cout= and
  =std::endl=.
  #+begin_src C++ :includes <iostream>
    using namespace std;

    cout << "hello name space" << endl;
  #+end_src

  #+RESULTS:
  : hello name space

  The real commands here are =std::cout= and =std::endl=.
* Using a structure

  - Now let's use this parts structure:
    #+begin_src C :tangle parts.c
      <<parts>>

        // main program
      int main(void)
      {
        // use parts structure for part1
        part1.number = 528;
        part1.on_hand = 10;
        strcpy(part1.name,"Printer cable");

        // print part1 data
        printf("Part: %s, number=%d, on hand=%d\n",
               part1.name, part1.number, part1.on_hand); 
        return 0;
      }
    #+end_src

    #+RESULTS:
    : Part: Printer cable, number=528, on hand=10

* Practice: Create and test an employee database structure

- Replicate this code for another structure that contains the
  following information on employees: =number=, =name=, and =sex=. Define
  two employees, =employee1= and =employee2=.

  When the code compiles, test the structure in a =main= program for
  =employee1= whose name is "Fritz Fisch", who is male and has the
  employee number 205482.

- Generate the output:
  #+begin_example
    Employee: Fritz Fisch, number = 285942, sex = M
  #+end_example

- Solution:
  #+begin_src C
    // declare structure
    struct {
      int number;// number
      char name[50]; // name
      char sex; // sex for example 'm' or 'f'
    } employee1, employee2; // define two employees

    // main program
    int main(void)
    {
      // define employee1
      employee1.number = 205482;
      employee1.sex = 'M';
      strcpy(employee1.name,"Fritz Fisch");

      // print employee1 details
      printf("Employee name = %s, ID=%d, Sex=%c\n",
             employee1.name,employee1.number,employee1.sex);
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Employee name = Fritz Fisch, ID=205482, Sex=M

* NEXT Initializing structure variables

- A structure declaration may include an initializer.

- Non-initialized members are set to 0.

- Initializers can be /positional/ (same order as in declaration), or
  /designated/ (any order as long as they're named): In the code below,
  =part1= is initialized with a designator, while =part2= is not.

  #+begin_src C
    #define NAME_LEN 25
    struct {
      int number;
      char name[NAME_LEN+1];
      int on_hand;
    } ...

    printf("Part 1: %s, number = %d, on hand = %d\n"
           "Part 2: %s, number = %d, on hand = %d\n",
           part1.name, part1.number, part1.on_hand,
           part2.name, part2.number, part2.on_hand);
  #+end_src

* Operations on structures

- The members of a structure are /lvalues/: they can appear left of an
  assignment, or as the operand in an increment/decremend expression:

- Like an array, a structure variable can be initialized and declared
  at once:

  #+begin_src C
    <<parts>> // declaration of parts only

  #+end_src

- The period to access a structure is a C operator. It takes
  precedence over nearly all other operators. Other C-like languages
  with user-defined structures or classes have this dot-operator, too.

  Python example:
  #+begin_src python :python python3 :results output
    import numpy as np
    arr = np.array([1,2,3]) # use array method of numpy library
    print(arr)
  #+end_src

- In the following statement, the argument contains two operators: the
  "dot" operator takes precedence: =&= computes the address of =part.num=:
#+begin_example C
  scanf("%d", &part.num);
#+end_example

- Though arrays cannot be copied using ===, structures can!

  #+begin_src C
    <<parts>>

      // initialize part1

    printf("Part 1: %s, number = %d, on hand = %d\n"
           "Part 2: %s, number = %d, on hand = %d\n",
           part1.name, part1.number, part1.on_hand,
           part2.name, part2.number, part2.on_hand);

    // copy one structure into another


    printf("Part 1: %s, number = %d, on hand = %d\n"
           "Part 2: %s, number = %d, on hand = %d\n",
           part1.name, part1.number, part1.on_hand,
           part2.name, part2.number, part2.on_hand);
  #+end_src

- You can use this to copy arrays with dummy structures:
  #+begin_src C

  #+end_src

- No other operations but === are available. In particular, there is no
  way to compare structures with logical operators (==== and =!==).

- The === operator only works if the structures types /compatible/, which
  means that they must be declared at the same time.

* Structure types

- We need to define a name that represents the /type/ of structure, not
  a particular (anonymous) structure /variable/.

- We can either define a /structure tag/ or use /typedef/ to define a type
  name for our structure:

- This example declares a structure tag named =Part=:
  #+name: Part
  #+begin_src C :main no :results none

  #+end_src

- The tag can now be used to declare variables:

  #+begin_src C :results none
    <<Part>>

    struct Part part1, part2; // must be prefixed by `struct`

  #+end_src

- Declaration of a tag and of structure variables can be combined:

  #+begin_src C

  #+end_src

- Alternatively, use =typedef= to define a genuine data type. All =Part=
  variables, no matter when they're declared, are compatible.

- Declaring a structure tag is mandatory when the structure is used in
  a linked list.

* Practice: Creating a structure tag

1. Declare a structure =Book= that has the following members:
   - An integer =id=.
   - A string =title= (with a maximum length of 50).
   - A float =price=.

2. Declare and initialize two =Book= variables:
   - =book1= with the =id= 101, =title= "C Programming", and =price= 29.99.
   - =book2= without initialization.

   Solution:
   #+name: Book
   #+begin_src C :results none
     
   #+end_src

3. Write a =main= program. In it:
   - Define =book2= with =id= 102, =title= "Data Structures", and =price=
     39.99.
   - Print =book1= and =book2= details.

   #+begin_src C :tangle book.c :main no
     <<Book>>

     int main()
     {
       // ...
       return 0;
     }
   #+end_src

* Structures as arguments and return values

- Functions may have structures as arguments and return values.

- Example: This function, when given a =Part= structure as its argument,
  prints the structure's members:

  #+begin_src C :tangle parts.c
    // Define a structure with a tag
    struct Part {
      int number;
      char name[50];
      int on_hand;
    };

    // Function to print a part

    int main(int argc, char *argv[])
    {
      // Initialize part1


      // Print part1 details

      return 0;
    }
  #+end_src

- The second function returns a =Part= structure that it constructs from
  its arguments:

  #+begin_src C
    // Define a structure with a tag
    struct Part {
      int number;
      char name[50];
      int on_hand;
    };

    int main(int argc, char *argv[])
    {
      // Create a Part using the build_part function


      // Print part details

      return 0;
    }
  #+end_src

* Practice: Function to print structure details

Write a program that:

1. Declares a =Book= structure with the following members: integer book
   ID), book title (max 100 characters), and book author (max 50
   characters).

2. Implements a function =print_book= to print the book's details in a
   formatted manner.

3. Initializes a =Book= structure in the =main= function and calls
   =print_book= to display its details.

   Expected output:
   #+begin_example
   Book ID: 201
   Book Title: The C Programming Language
   Author: Brian W. Kernighan and Dennis M. Ritchie
   #+end_example

Solution:
#+begin_src C
  // declare Book structure

  // function to print book details
  // returns: nothing
  // params: Book structure


  // main program
  int main(int argc, char **argv)
  {
    // initialize a book structure

    // print book details using print_book
    
    return 0;
  }

  // function definition
  
#+end_src

* Bonus practice: Return structure from function (home assignment)

Write a program that:

1. Defines a =Student= structure with the following members:
   - =int roll_no= (for roll number)
   - =char name[50]= (for student name)
   - =float marks= (for marks)

2. Implements a function =struct Student create_student(int roll_no,
   const char *name, float marks)= that:
   - Takes roll number, name, and marks as arguments.
   - Constructs and returns a =Student= structure with the provided
     values.

3. In the =main= function, uses =create_student= to initialize a =Student=
   structure and prints its details.

Expected Output (Example):
: Student Roll No: 101
: Student Name: John Doe
: Marks: 92.5

* Nested arrays with structure elements

- Structures and arrays can be combined without restriction.

- This tagged structure can store a person's first name, middle
  initial, and last name.

  #+name: person_name
  #+begin_src C :results none
    #define FIRST_NAME_LEN 20
    #define LAST_NAME_LEN 50

    struct ... { // add person_name tag
      char first[FIRST_NAME_LEN+1];
      char middle_initial;
      char last[LAST_NAME_LEN+1];
    };
  #+end_src

- You can use =person_name= as part of a larger structure now:
  #+name: student
  #+begin_src C :results none
    <<person_name>> // a person's first, last name and middle initial

    struct student {
      ...            // add person_name structure
      int id, age;
      char sex;
    } student1, student2;
  #+end_src

- You access a =student='s name parts with two dot operators:

  #+begin_src C :main no
    <<student>> // student's age, sex and name, two students defined

    int main()
    {
      // assign first name to student
      ...
      printf("The student is called %s.\n", ...);
      return 0;
    }

  #+end_src

- Why not just add the name details to =student=?
  #+begin_quote
  1. You can treat names more easily as units of data: If you write a
     function that displays a name, you could pass just one argument,
     a =person_name= structure, instead of three arguments.

  2. You can copy the information from a =person_name= structure to the
     =name= member of a =student= in one instead of three assignments.
  #+end_quote

- Example:
  #+begin_src C :tangle student.c
    <<student>> // student's age, sex and name, two students defined

    void display_name(...)
    {
      printf("Student's name: %s %c. %s\n",
    	 ...
    }

    int main()
    {
      // initialize student's name
      struct person_name name;
      strcpy(name.first, "Jane");
      name.middle_initial = 'D';
      strcpy(name.last, "Doe");

      // assign name to student1
      ...

      // display student1's name
      ...

      // initialize student's new name
      struct person_name new_name;
      strcpy(new_name.first, "Jane");
      new_name.middle_initial = 'D';
      strcpy(new_name.last, "Zane");

      // assign new name to student1
      ...

      // display student1's new name
      ...
      
      return 0;
    }
  #+end_src
  
* Arrays of structures

- Arrays whose elements are structures are very common, and can serve
  as a simple database.

- Example: This array of =part= structures can store information about
  100 parts.
  
  #+begin_example C
    struct part inventory[100];
  #+end_example

- To access on of the parts you use subscripting: This prints the =part=
  stored in position =i=:
  
  #+begin_example C
    print_part(inventory[i]); // array element contains i-th `part` structure
  #+end_example

- To assign a =number= within a =part= structure, combine subscripting and
  member selection:

  #+begin_example C
    inventory[i].number = 883; // changes number of i-th part to 883
  #+end_example

- To assign a character in a =part= name, combine subscripting,
  selection, and subscripting again:

  #+begin_example C
    inventory[i].name[0] = '\0'; // changes `name` of i-th part to \0
  #+end_example


