#+TITLE:Notebook
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC 240 - Data structures with C++ - Lyon College, FA24
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
#+PROPERTY: header-args:python :session *Python* :results output :exports both :noweb yes
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
* Week 1
* Week 2

** Review of Last Session (10 minutes)

- Brief review of Emacs + Org-mode basics
  #+begin_quote
  
  #+end_quote
- Overview of course objectives and importance of data structures
  #+begin_quote

  #+end_quote
- Discuss any questions from the last session
  #+begin_quote

  #+end_quote

** Test

- Quick test on Emacs + Org-mode usage

** In-class Programming Assignment Review

- Set up Emacs for C++ development
  
- Write a simple C++ "Hello, World!" program using Emacs + Org-mode
  
* Extras

These are deepening sections, which I may or may not have presented in
class. They are not relevant for tests or grades unless I said so.


** How do choose the right data structure

By building up muscle: solve many problems in different ways.

Example: "Hello" program that greets the user by name
1) Input from the keyboard or from a file
2) Output to the screen or to a file
3) Output with =cout= or =printf=
4) User name stored as =string= or as =char= array
5) User name retrieved with =cin= or with =cin.get= or =scanf=
6) Concatenate greeting message
7) With a user-defined function with or without =return=
8) Passing function parameters by value or by reference
9) With a user-defined class (and a default name)
10) Using a user-defined function and a pointer array

    
*Solutions:*

- Input file
  #+begin_src bash :results output
    echo "Marcus" > input
    cat input
  #+end_src

  #+RESULTS:
  : Marcus

- Input from the keyboard (in Emacs with =:cmdline < input=), using
  =scanf= and =printf= from the =cstdio= library:
  #+begin_src C++ :main yes :includes <cstdio> :cmdline < input :results output :exports both
    char name[100]{};
    scanf("%99s",name); // name is already a pointer to name[0]
    printf("Hello, %s\n", name);
  #+end_src

  #+RESULTS:
  : Hello, Marcus

- Input from keyboard, output to screen, and using a =string= type and
  =cin= and =cout= with stream insertion/extraction operators =>>= and =<<=:
  #+begin_src C++ :cmdline < input :results output :exports both
    #include <iostream>
    #include <string>

    using namespace std;

    int main() {
      // declare variables
      string name;
      // get input
      cin >> name;
      // write output
      cout << "Hello, " << name << endl;

      return 0;
    }
  #+end_src

  #+RESULTS:
  : Hello, Marcus

- Input from file, write output to file, and using a =string= type and
  I/O files with stream insertion/extraction operators =>>= and =<<=:
  #+begin_src C++ :namespaces std :results none :exports both
    #include <iostream>
    #include <string>
    #include <fstream>

    int main() {
      // declare variables
      string name;
      ifstream inFile;
      ofstream outFile;

      // open input and output files
      inFile.open("input");
      outFile.open("output");

      // get input from file and close
      inFile >> name;
      inFile.close();

      // write output to file and close
      outFile << "Hello, " << name;

      return 0;
    }
  #+end_src

  Check the output file:
  #+begin_src bash :results output
    cat output
  #+end_src

  #+RESULTS:
  : Hello, Marcus

- Use user-defined function ~hello~ without, and ~hello2~ with =return=, and
  a =string= for ~name~ in the function:
  #+begin_src C++ :results output :exports both
    #include <iostream>
    #include <string>

    using namespace std;

    // void function prints greeting
    void hello(string name) {
      cout << "Hello, " + name << endl;
    }

    // function returns string
    string hello2(string name) {
      return "Hello, " + name;
    }

    int main() {
      // call function
      hello("Marcus");
      // call another function
      cout << hello2("Marcus");

      return 0;
    }
  #+end_src

  #+RESULTS:
  : Hello, Marcus
  : Hello, Marcus

** Step-by-Step Program Proof
*** Solution code


#+begin_src C++ :cmdline < input :main yes :includes <iostream> :includes <string> :includes <cstdio> :namespaces std :cmdline < input :results output :exports both
#include <iostream>
#include <string>
#include <cstdio>

using namespace std;

int main() {
    char name[100];  // Array to store the name
    int age;         // Variable to store the age

    // Read the name (string) using scanf without & because name is an array
    scanf("%99s", name);
    // Read the age (integer) using scanf with & because age is a single variable
    scanf("%d", &age);

    // Print the greeting message
    printf("Hello, %s. You are %d years old.\n", name, age);

    return 0;
}
#+end_src

#+RESULTS:
: Hello, John. You are 25 years old.

#+begin_src sh :results output :exports both
echo "John 25" > input
#+end_src

*** Code Compilation:
   - Ensure the code compiles without errors.
   - Compilation in C++ checks for syntactic correctness.

*** Behavioral Verification:
   - Analyze the code for logical correctness and expected behavior.
   - Ensure the program handles typical input correctly.

*** Edge Cases Handling:
   - Test the code with different inputs, including edge cases.
   - Verify the program handles inputs of various lengths and types.

*** Code Analysis:
**** Includes and Namespace:
   - Includes <iostream>, <string>, and <cstdio> which are necessary for input/output operations.
   - Uses the std namespace for convenience.

**** Main Function:
   - The main function is defined correctly as the entry point.
   - Returns 0 to indicate successful execution.
     
**** Variable Declarations:
   - char name[100]; declares a character array to store the name, assuming a maximum of 99 characters plus the null terminator.
   - int age; declares an integer variable to store the age.

**** Input Handling:
   - scanf("%99s", name); reads up to 99 characters into the name array, ensuring no buffer overflow.
   - scanf("%d", &age); reads an integer into the age variable.

**** Output:
   - printf("Hello, %s. You are %d years old.\n", name, age); formats and outputs the string and integer correctly.

*** Formal Verification Steps:

**** Test Case: Normal Input
   - Input: John 25
   - Expected Output: Hello, John. You are 25 years old.
   - Verification: Matches expected output.

**** Test Case: Maximum Length Name
   - Input: A very long name with exactly 99 characters.......................................................................... 30
   - Expected Output: Hello, A very long name with exactly 99 characters.......................................................................... You are 30 years old.
   - Verification: Matches expected output without buffer overflow.

**** Test Case: Minimum Length Name
   - Input: A 1
   - Expected Output: Hello, A. You are 1 years old.
   - Verification: Matches expected output.

**** Test Case: Empty Name
   - Input:  0
   - Expected Output: Hello, . You are 0 years old.
   - Verification: Matches expected output.

**** Test Case: Non-Integer Age
   - Input: John twenty
   - Expected Output: The program will not behave as expected since scanf will not correctly read a non-integer into the age variable. This demonstrates the limitation of using scanf.

*** Testing Code with Various Inputs:

#+begin_src C++ :main yes :includes <iostream> :includes <string> :includes <cstdio> :namespaces std :cmdline < input :results output :exports both
#include <iostream>
#include <string>
#include <cstdio>

using namespace std;

int main() {
    char name[100];  // Array to store the name
    int age;         // Variable to store the age

    // Read the name (string) using scanf without & because name is an array
    scanf("%99s", name);
    // Read the age (integer) using scanf with & because age is a single variable
    scanf("%d", &age);

    // Print the greeting message
    printf("Hello, %s. You are %d years old.\n", name, age);

    return 0;
}
#+end_src

#+begin_src sh :results output :exports both
# Normal input
echo "John 25" > input
./a.out < input

# Maximum length name
echo "A very long name with exactly 99 characters.......................................................................... 30" > input
./a.out < input

# Minimum length name
echo "A 1" > input
./a.out < input

# Empty name
echo " 0" > input
./a.out < input

# Non-integer age
echo "John twenty" > input
./a.out < input
#+end_src

*** Results of Each Test Case:

**** Normal Input:
#+begin_quote
Hello, John. You are 25 years old.
#+end_quote

**** Maximum Length Name:
#+begin_quote
Hello, A very long name with exactly 99 characters.......................................................................... You are 30 years old.
#+end_quote

**** Minimum Length Name:
#+begin_quote
Hello, A. You are 1 years old.
#+end_quote

**** Empty Name:
#+begin_quote
Hello, . You are 0 years old.
#+end_quote

**** Non-integer Age:
#+begin_quote
(This will not produce the expected output because scanf will fail to read the non-integer age correctly.)
#+end_quote

*** Conclusion:
   - The code handles normal and edge cases correctly, proving its robustness for typical inputs.
   - Edge cases with maximum and minimum input lengths are handled without errors.
   - The limitation with non-integer age input shows the importance of proper input validation.

   Thus, we can conclude that the code is well-structured and performs correctly for a wide range of inputs, with the exception of handling invalid input types for the age, which would require additional error handling.
