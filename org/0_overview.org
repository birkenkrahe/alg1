#+TITLE: Introduction to the course and development tools
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 240 - Data structures with C++ - Lyon College, FA24
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
* Course Overview
#+attr_html: :width 400px:
[[../img/poster.png]]

The syllabus is available on [[https://lyon.instructure.com/courses/2623/assignments/syllabus][Canvas]] and on [[https://github.com/birkenkrahe/alg1/blob/main/org/syllabus.org][GitHub]].

1) *Instructor Introduction*
   - Background and experience
   - Course objectives and expectations

2) *General Course Information*
   - Meeting Times: Tue-Thu 9:30-10.45 AM
   - Meeting place: Derby Science Building computer lab room 239
   - Professor's Office: Derby Science Building 210
   - Phone: (870) 307-7254 (office) / (501) 422-4725 (private)
   - Office hours: [[https://calendar.app.google/yjr7tB7foMYowRJm7][by appointment]] MWF 4pm, Tue 3pm, Thu 11 am & 3 pm

3) *Materials and Multimedia*
   - 100-page C++ language reference: [[https://rooksguide.org/wp-content/uploads/2013/12/rooks-guide-isbn-version.pdf][Rook's Guide to C++]]
   - 800-page C++ language reference: [[https://ccc.codes/][C++ Crash Course]]
   - Optional Textbooks:
     + Helfrich, C++ Data Structures (KendallHunt, 2020)
     + Kanetkar Y, Data Structures Through C++ 5th ed (bpb, 2024)
     + Malik, C++ Programming - Program Design Including Data Structures (Cengage 2015)
     + La Rocca, Grokking Data Structures (Manning 2023) - with Python
     + Morin, Open Data Structures (in C++) (OpenText, 2013)
   - Recommended Videos:
     - "C++ Data Structures & Algorithms @[[https://scottbarrett.com/][Udemy]]
     - [[https://www.youtube.com/@CPlusPlusDataStructures/videos][Helfrich's YouTube videos]] on C++ Data Structures
     - [[https://youtu.be/B31LgI4Y4DQ?si=mu7z5qTupDg1Pu3x][freeCodeCamp course]] on Data Structures with C++

4) *Course Objectives*
   - Explore theory and application of data structures using C++
   - Equip students with knowledge to store, process, and retrieve data
     efficiently
   - Emphasize algorithmic thinking and optimization techniques

5) *Target Audience*
   - Students with basic understanding of programming concepts
   - Those interested in preparing for deeper study of algorithms
   - Those interested in advancing their knowledge in data science

6) *Student Learning Outcomes*
   - Understand major data structures and their applications
   - Implement various data structures in C++
   - Analyze efficiency of data structures and algorithms
   - Apply algorithmic thinking to solve complex problems
   - Design and develop efficient software solutions
   - Design UML class diagrams and BMPN models

7) *Course Requirements*
   - Prerequisites: Introduction to Programming (CSC100 or CSC115 or
     CSC109, and MTH101)
   - Willingness to engage in problem-solving and critical thinking
   - Willingness to put in substantial time to program on your own

8) *Grading* (see also *Rubric*)
   - Weekly programming assignments: 50%
   - Weekly multiple-choice tests: 25%
   - Final exam (optional): 25%

9) *Learning Management System*
   - Use of Lyon's Canvas installation (use the calendar!)
   - Course materials, assignments, grades, recorded sessions

10) *GitHub, Linux & Emacs & Org-mode*
    - Course materials in public GitHub repository: [[https://github.com/birkenkrahe/alg1][github.com/birkenkrahe/alg1]]
    - Free subscription to GitHub Codespaces with AI coding assistant Copilot
    - Emacs Power User Editor & Org-mode in a Linux programming environment

* Q & A

1. What if you don't know C++?
   #+begin_quote
   You should have taken introductory programming in Java or Python or
   C/C++: Both Java and Python are high-level languages, but C++ is
   quite different (and quite a bit more complicated, too).

   Make sure you take the (optional ) entry quiz and complete the
   (optional) entry programming assignment if you didn't do it yet.

   If you have any weaknesses in the basics (or if you haven't studied
   C++ yet at all), read "The Rook's Guide to C++" for free and answer
   the review questions. Sample solutions available online in GitHub.

   Otherwise we'll be reviewing (and adding to) our knowledge of C++
   in the first 4 weeks of the course, focusing on OOP aspects.
   #+end_quote
2. Will I be able to work on this course from home?
   #+begin_quote
   Absolutely. You'll be using a personal virtual Linux box on our
   dedicated Lyon computer and data science server, and you can login
   to this system from anywhere as long as you've got an Internet
   connection.

   If that doesn't work for you for whatever reason (connection,
   convenience etc.) then you can easily install Linux via dual boot
   or as a virtual machine on your PC.

   In this case, you can put your GitHub skills to good use: create a
   repository for this course where you keep the latest version of all
   your files, and clone it to your local PC. This is what I do, too:
   I'm working on my files in different locations, and I use Git to
   maintain the latest version on any machine at any time.
   #+end_quote
3. Why did you choose C++ for "data structures"?
   #+begin_quote
   I did not choose it, the catalog (and wiser, older professors
   before me) did. But I'm on board with it for a number of reasons:
   - C++ is *compiled* (unlike Python) and offers high performance,
     which you need for big data and *complex* algorithms (like machine
     learning).
   - C++ offers explicit *control* over memory allocation and
     deallocation, which is essential to know how data structures work
     under the hood.
   - C++ has a Standard Template Library (STL) which offers template
     classes for *common* data structures (vectors, lists, queues,
     stacks) and algorithms, which saves time and helps you learn.
   - C++ is used in industry for performance-*critical* applications
     (like large-scale multi-player network games, or spacecraft).
   #+end_quote
4. What are your favorite programming languages?
   #+begin_quote
   Though I have (passing) knowledge of many programming languages,
   C++ and Python are becoming my main go-to languages for performance
   (C++) and data science (Python), and SQL for database applications.

   R is great for visualization and stats, and was another one of my
   favorite languages but it has fallen out of my quality world
   because of the dominance of the "Tidyverse" ([[https://github.com/matloff/TidyverseSkeptic][see here]]).

   I learnt these languages at different times in my life: C++ in the
   1990s (shortly after it was invented), SQL in 2005, R in 2019, and
   Python in 2023. C++ has developed massively since then though and I
   am more comfortable with its subset C than with many of the modern
   developments of the language - but I'm keen to learn!
   #+end_quote
5. How should you study for this course?
   #+begin_quote
   
   #+end_quote

* IN PROGRESS Development tools

- Three tools are central to succeeding in this course:
  1) The Linux operating system
  2) The Emacs editor with thOrg-mode package
  3) The GitHub software engineering platform

** Linux

** Emacs

- You've most likely worked with Emacs + Org-mode and the literate
  programming approach in my other data science or computing courses.

- Test your memory with a few review questions:
  1. What is special about Emacs?
  2. What is Org-mode?
  3. What is Literate Programming?

** GitHub
