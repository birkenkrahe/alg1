#+title: Program Organization
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> <time.h> :results output :exports both :comments none :noweb yes
* README

- This chapter covers program organization with regard to a program's
  chunks (modules, functions), objects (variables), and memory.

- In class, we'll be working with an excerpt and interactive
  exercises. This section is accompanied by one bonus and by one
  mandatory programming assignment, as well as an online test.

- Much of this is based on King, C Programming (2008), chapter 10.

* Memory organization

|-----------+-----------------------------+-------------------|
| STACK     | =func(int i);=                | local variable    |
|-----------+-----------------------------+-------------------|
| HEAP      | =(int *) malloc(sizeof(int))= | pointer variable  |
|-----------+-----------------------------+-------------------|
| GLOBALS   | =int glob = 42;=              | external variable |
|-----------+-----------------------------+-------------------|
| CONSTANTS | =char *str = "hello";=        | string literal    |
|-----------+-----------------------------+-------------------|
| CODE      | =str db 'hello', 0=           | assembly code     |
|-----------+-----------------------------+-------------------|

- *Stack:* The stack is the section of memory used for local variable
  storage. When you call a function, all of its local variables are
  created on the stack. When you leave the function, they are
  destroyed.

- *Heap*: The heap is for dynamic memory, data that are created
  ("allocated") when the program is running, and then hang around for
  a long time (until they are "freed" or deallocated).

- *Globals:* A global variable lives outside of all functions and is
  visible to all of them. They can be updated anywhere
  anytime. Created when the program runs for the first time.

- *Constants*: Created when the program first runs but stored in
  /read-only/ memory. Examples are /string literals/.

- *Code:* This is where the code that the compiler has assembled, is
  located. It is also read-only, and sits at the lowest memory
  addresses.

- For example, the assembly code to define the string literal =char
  *str = "hello";= would look like this (in x86):

  #+begin_example
  section .data
      str db 'hello', 0  ; Define a string 'hello' with a null terminator

  section .bss
      ptr resb 4  ; Reserve 4 bytes for the pointer (32-bit system)

  section .text
      global _start

  _start:
      ; Load the address of the string into the pointer
      mov eax, str      ; Move the address of 'hello' into EAX
      mov [ptr], eax    ; Store the address in the variable 'ptr'

      ; The rest of your code would go here

      ; Exit system call (Linux)
      mov eax, 1        ; sys_exit
      xor ebx, ebx      ; Exit code 0
      int 0x80
#+end_example

- For a whole book on understanding computers with assembly, see Patt
  and Patel, "Introduction to Computing Systems: From Bits & Gatees to
  C/C++ & Beyond" (McGraw-Hill, 2020)

* Storage and Scope

- A variable declared in the body of a function is /local/ to the
  function.

- Local variables have *automatic storage duration* - the storage is
  allocated when the function is called and deallocated upon return.

- Local variables have *block scope*: they are visible from the point of
  its declaration to the end of the enclosing function body.

- Which of the variables in the following example are local?
  #+begin_example C
    int sum_digits(int n)
    {
      int sum = 0;

      while n > 0; {
        sum += n % 10;
        n /= 10;
      }
      return sum;
    }
  #+end_example

  Answer:
  #+begin_quote
  - The variables =sum= and =n= are local to the function.
  - They're allocated at the start, and deallocated at the end of the
    function (/automatic storage duration/).
  - They are visible inside the function from the moment of their
    declaration (/block scope/).
  #+end_quote

- In C/C++ you can declare variables anywhere you like so the scope
  can be minimal. In the weird example below, =i= can never be used.
  #+begin_example C
    void f(void)
    {
      // ...
      int i;   // variable with minimal scope
    }
  #+end_example

- Adding =static= to a local variable declaration gives it *static
  storage duration*: it now has permanent storage and retains its value
  throughout the execution of the program:
  #+begin_example C
    void func(void)
    {
      static int i; // static local variable
      // ...
  #+end_example

- Function *parameters* have the same properties - automatic storage
  duration and block scope - as local variables.

* PROJECT Example: Static Local Variables

- *Task:* Write a function =count_calls= that uses a static local variable
  =call_count= to keep track of how many times =count_calls= was called.

  #+begin_src C
    void count_calls(void)
    {
      static int call_count = 0;
      call_count++;
      printf("Function called %d times\n", call_count);
    }

    int main(void)
    {
      count_calls();
      count_calls();
      count_calls();
      return 0;
    }
  #+end_src

  #+RESULTS:
  : Function called 1 times
  : Function called 2 times
  : Function called 3 times

- Unlike a regular local variable, the value of =call_count= persists
  across multiple function calls.

- To test that, turn =call_count= into a regular variable in the code
  block above and run the program again.

* Type conversion

- For the computer to perform an arithmetic operation, the operands
  must be of the same size (same number of bits) and be stored in the
  same way (same data type).

- C allows the basic types to be mixed in expressions: you can combine
  =int= and =float=, and even =char= in a single expression. Can you explain
  the following =result=?
  #+begin_src C
    int i = 1;
    float x = 1.f;
    char c = 'a'; // ASCII value is 97
    double result = i + x + c;
    printf("%g\n", result);
  #+end_src

  #+RESULTS:
  : 99

- Explanation:
  #+begin_quote
  To compute =double result=, =i=, =x=, and =c= are implicitly converted to
  =double=. This is a /widening/ conversion for the numeric variables =i=
  and =x=, and a conversion from =char= to =int= and from =int= to =double= for
  =c=. For the conversion to =int=, the numeric ASCII value of =c= is used.
  #+end_quote

  #+begin_src C
    char c = 'a'; // ASCII value is 97
    printf("ASCII value of %c = %d\n",c,c);
  #+end_src

- C also allows /explicit conversion/ using the /cast/ operator, and
  explicit /type definitions/ with =typedef=.

* Implicit Arithmetic Conversions

- Because there are so many different arithmetic types[fn:1], implicit
  conversion rules are complicated. A conversion is performed:

  1) When the operands don't have the same type (the usual case):
     =float f; int i = 2 * f;=

  2) When the type on the left doesn't match the type on the right of
     an assignment operator: =float f; int i = f;=

  3) When the type of an argument in a function call does not match
     the type of the corresponding parameter:

     #+begin_src C :results none
       void f(int i) {};
       float x;
       f(x);
     #+end_src

  4) When the type of the expression in a =return= statement does not
     match the functions =return= type:
     #+begin_src C :results none
       int f(int i) { return 0.f; };
       float x;
       f(x);
     #+end_src

* PROJECT Type conversion

- *Task*: Modify the following program to perform explicit type
  conversion when calculating the =result=:

  #+begin_src C
    int i = 1;
    float f = 1.5;
    char c = 'A';

    // implicit conversion
    double result = i + f + c;
    printf("Result (implicit conversion): %f\n", result);
  #+end_src


  #+RESULTS:
  : Result (implicit conversion): 67.500000

- Solution: Explicit conversion
  #+begin_src C
    int i = 1;
    float f = 1.5;
    char c = 'A';

    // implicit conversion
    double result = i + f + c;
    printf("Result (implicit conversion): %f\n", result);

    // explicit conversion
    result = (double)i + (double)f + (double)c;
    printf("Result (explicit conversion): %f\n", result);
  #+end_src

  #+RESULTS:
  : Result (implicit conversion): 67.500000
  : Result (explicit conversion): 67.500000

* Type Definitions with =typedef=

- You can create a Boolean type =BOOL= with a macro, which then allows
  you to define variables of that type:
  #+begin_src C :results none
    #define BOOL int

    BOOL T = 1;
    BOOL F = 0;
  #+end_src

- A better way is to use a /type definition/:
  #+begin_src C :results none
    typedef int Bool; // defines type `Bool` as `int`

    Bool flag;
  #+end_src

- To the compiler, =flag= is nothing but an =int= variable.

- What's the point?

  1) Type definitions make a program more understandable provided
     you've chosen meaningful names.

  2) Type definitions can make a program easier to modify.

  3) Type definitions help making programs portable.

- Example: variables =cash_in= and =cash_out= are used to store dollar
  amounts.

  1) Declaring a =Dollars= type is more informative than =float=:
     #+begin_src C
       typedef float Dollars; // declare `Dollars` type
       Dollars cash_in, cash_out;
     #+end_src

  2) If you later decide that =Dollars= is should be =double= instead of
     =float=, you only have to change =typedef double Dollars=.

- Portability is a big issue: types may have different ranges on
  different machines. The statement =int i = 100000;= works on a 32-bit
  machine, but fails on a 16-bit machine[fn:2]

- *Example*: for a large warehouse program, you need variables capable
  of storing product quantities in the range [0,50000]. We could use
  =long= variables for that[fn:3] but operations on =int= are faster and
  they take up less space. To use =int=, we define our own type:
  #+begin_src C :results output
    typedef int Quantity;
    Quantity q;
    printf("Size of Quantity = %ld\n",sizeof(q));
  #+end_src

- When moving to a machine with shorter integers, change the
  definition:
  #+begin_src C :results output
    typedef long Quantity;
    Quantity q;
    printf("Size of Quantity = %ld\n",sizeof(q));    
  #+end_src

- The C library uses =typedef= to create names for types that can vary
  from one C implementation to another - e.g. =typedef unsigned long
  int size_t;= The =_t= signifies that these types can vary from machine
  to another.

- The =stdint.h= header uses =typedef= to define names for integers with a
  particular number of bits, e.g. =int32_t= is a signed integer type
  with exactly 32 bits to make programs more portable.

- Do you remember how to determine exactly how much memory is required
  to store values of a particular type?
  #+begin_quote
  The =sizeof= operator returns the number of bytes needed to store
  values of its argument type, e.g. if =i= and =j= are integers, then
  =sizeof(i)= is 4 on a 32-bit machine, as is =sizeof(i+j)=.
  #+end_quote

- Printing a memory value requires care because its type is =size_t= and
  depends on implementation. It is guaranteed to be an unsigned
  integer type. To be safe, cast it and print it as cast:
  #+begin_src C
    printf("Size of int: %lu\n", (unsigned long) sizeof(int));
  #+end_src

- The =printf= function in C99 and later can display =size_t= directly:
  #+begin_src C
    printf("Size of int: %zu\n", sizeof(int));
  #+end_src

* External variables

Functions can communicate through

1) passing variables.

2) external (or /global/) variables that are declared outside the body
   of any function.

   They have =static= storage duration (don't disappear until the
   program is finished), and /file scope/ (rather than /block scope/):
   they can be accessed by all functions after the declaration of the
   external variable.

* Pros and Cons of external variables

- External variables are convenient when many functions share one, or
  when a few functions share many variables.

- In most cases, it is better for functions to communicate through
  parameters rather by sharing variables:

  1) When changing an external variable (e.g. altering its type),
     every function that uses it must be checked.

  2) If an external variable is assigned an incorrect value, it is
     difficult to identify the guilty function.

  3) Functions that rely on external variables are harder to reuse in
     other programs (all required globals must be taken along).

* PROJECT External variable bug

The following example is supposed to display a 10 x 10 arrangement of
asterisks:




* Organizing Programs

Our programs are going to get larger - and we've touched upon all of
these structural components of programs[fn:4]:

#+begin_example
#include directives
#define directives
Type definitions
Declarations of external variables
Prototypes for functions other than main
Definition of main
Definitions of other functions
#+end_example

Precede each function definition by a boxed comment that gives the name
of the function, explains its purposes, discusses the meaning of each
parameter, describes its return value (if any), and lists any side
effect it has (such as modifying external variables).

* Using External Variables to Implement a Stack

- A stack, like an array, can store multiple data items of the same
  type. Remember this is where local variables are stored transiently.

- The only allowed operations are: =push= an item onto the stack (add it
  at one end, the stack top), or =pop= it from the stack (remove it from
  teh same end).

- Examining or modifying an item that is not at the top of the stack
  is forbidden.

- We implement a stack in C as an array ~contents~ with an integer
  variable ~top~ that marks the position of the stack top. An empty
  stack has ~top = 0~.

- To push an item onto the stack, we store it in ~contents~ at the
  position ~top~, then increment ~top~. To pop an item, decrement ~top~,
  then use it as an index to ~contents~ to fetch the item to be popped.

- Functions:
  #+name: stack_header
  #+begin_src C
    #include <stdbool.h>

    #define STACK_SIZE 100

    // external variables
    int contents[STACK_SIZE] // stack array
    int top = 0; // stack pointer


  #+end_src

  #+RESULTS: stack_header

* Full Code for Stack Implementation

- *Task*: Turn the function definitions below into a working program.

- Code for the stack implementation:
  #+name: stack
  #+begin_src C :main no
    #include <stdbool.h> // adds data type `bool`
    #define STACK_SIZE 20

    /* external variables */
    int contents[STACK_SIZE];
    int top = 0;

    /* function prototypes */
    void make_empty(void); // set top to 0
    bool is_empty(void); // check if top is 0 (stack empty)
    bool is_full(void); // check if top is STACK_SIZE (stack full)
    void push(int i); // push i onto stack (if not full)
    int pop(void); // pop top stack element
    int stack_overflow(void); // stack overflow (push to full stack)
    int stack_underflow(void); // stack underflow (pop from empty stack)                         // returns 1
    int print_stack(); // print stack as array
    /* main program */
    int main(void)
    {
      // push number onto stack
      push(1);
      print_stack();
      push(1);
      print_stack();
      //print_stack();
      // pop number from stack
      pop();
      print_stack();
      // pop number from stack (trigger underflow)
      //pop();
      // push STACK_SIZE numbers onto stack
      for (int i=0; i < STACK_SIZE; i++)
        push(1);
      // push number onto stack (trigger overflow)
      print_stack();
      //push(100);
      //push(101);
      return 0;
    }
    /*****************************************************************/
    // make_empty: set stack top index to zero
    // no parameters (void), no return (void)
    // modifies external variable `top`
    /*****************************************************************/
    void make_empty(void)
    {
      top = 0;
    }
    /*****************************************************************/
    // is_empty: check if stack is empty and return Boolean
    // no parameters (void), returns `bool`
    // checks if external variable `top` is zero
    /*****************************************************************/
    bool is_empty(void)
    {
      return top == 0;
    }
    /*****************************************************************/
    // is_full: check if stack is full and return Boolean
    // no parameters (void), returns `bool`
    // checks if external variable `top` is STACK_SIZE (constant)
    /*****************************************************************/
    bool is_full(void)
    {
      return top == STACK_SIZE;
    }
    /*****************************************************************/
    // push: add integer to top of non-full stack
    // takes integer parameter (int), returns nothing (void)
    // uses external `top` as index for stack array `contents`
    // if stack is full, call stack_overflow
    /*****************************************************************/
    void push(int i)
    {
      if (is_full())
        stack_overflow();
      else
        contents[top++] = i;
      //return is_full() ? stack_overflow() : contents[top++]=i;
    }
    /*****************************************************************/
    // pop: extract integer from top of non-empty stack
    // no parameters (void), returns integer
    // uses external `top` as index for stack array `contents`
    // if stack is empty, call stack_underflow
    /*****************************************************************/
    int pop(void)
    {
      if (is_empty())
        stack_underflow();
      else
        return contents[--top];
    }
    /*****************************************************************/
    // stack_overflow: exits with 1 and aborts if stack is_full
    // no parameter (void), returns integer (EXIT_FAILURE)
    /*****************************************************************/
    int stack_overflow(void)
    {
      printf("Stack overflow!\n");
      return EXIT_FAILURE;
    }
    /*****************************************************************/
    // stack_underflow: exits with 1 and aborts if stack is_empty
    // no parameter (void), returns integer (EXIT_FAILURE)
    /*****************************************************************/
    int stack_underflow(void)
    {
      printf("Stack underflow!\n");
      return EXIT_FAILURE;
    }
    /*****************************************************************/
    // print_stack: print stack as array `contents`; constant
    // no parameter (void), returns integer from `contents` (external)
    /*****************************************************************/
    const int print_stack(void)
    {
      printf("top = %d\n",top);
      for (int i=0;i<STACK_SIZE;i++)
        printf("%d ", contents[i]);
      puts("");
    }
  #+end_src

  #+RESULTS: stack
  : top = 1
  : 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  : top = 2
  : 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  : top = 1
  : 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  : Stack overflow!
  : top = 20
  : 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

* Guessing a number

- We'll write a simple game-playing program: the program generates a
  random number between 1 and 100, which the user attempts to guess in
  as few tries as possible.

  Sample output:
  #+begin_example
  A new number has been chosen.
  Enter guess: 55
  Too low; try again.
  Enter guess: 65
  Too high; try again.
  Enter guess: 60
  Too high; try again.
  Enter guess: 58
  You won in 4 guesses!

  Play again? (Y/N) Y

  A new number has been chosen.
  Enter guess: 78
  Too high; try again.
  Enter guess: 34
  You won in 2 guesses!
  #+end_example

- Which tasks will this program have to carry out? Each of them will
  be put in a function:
  #+begin_quote
  1) Initialize the random number generator
  2) Choosing a secret number randomly
  3) Read user guess, compute and print answers
  #+end_quote

- We write each of these functions first and then create the =main=
  program with the external variables, prototypes, function calls.

- =stdlib= has several functions to generate random numbers. We use
  =srand= from =stdlib.h=. The function requires a seed. It does not
  return any value, and it takes any number as seed value[fn:5].

- As seed, we use the =time= function from =time.h=, which returns the
  current time encoded in a single number, the number of seconds that
  have elapsed since /the Epoch/, the starting point for Unix system
  time, defined as 00:00:00 UTC on January 1, 1970.
  #+begin_src C
    #include <time.h>

    time_t current_time; // `time_t` is a portable data type for time data
    current_time = time(NULL); // return the current time but don't store it anywhere
    printf("The current time in seconds since the Epoch: %ld\n", current_time);
  #+end_src

  #+RESULTS:
  : The current time in seconds since the Epoch: 1729971344

- Now the function to initialize the number generator (requires to
  =include= =stdlib.h= and =time.h=). We give it a =#+name= to use it with
  =noweb= later[fn:6]:
  #+name: initialize_number_generator
  #+begin_src C :results none
    /***************************************************************/
    // initialize_number_generator: Initializes the random number
    //                              generator using the time of day.
    /***************************************************************/
    void initialize_number_generator(void)
    {
      srand ( (unsigned) time(NULL));
    }
  #+end_src

- To choose a secret number randomly, generate a random number with
  =stdlib::rand(void)=: this function chooses a pseudo-random integer in
  the range =[0,RAND_MAX]=, where =RAND_MAX= is defined in =stdlib=:
  #+begin_src C
    #include <stdlib.h>
    printf("%d\n",RAND_MAX); // (2^32)/2 - 1
  #+end_src

  #+RESULTS:
  : 2147483647

- Here is an example. The first loop generates random numbers, and the
  second loop scales them to =[1,100]=:
  #+begin_src C
    #include <stdlib.h>
    #include <time.h>
    #define MAX_NUMBER 100;
    int i, r1[10], r2[10];
    srand(time(NULL)); // this guarantees different sets of random numbers
    for (i=0;i<10;i++) {
      r1[i]=rand();
      r2[i]=r1[i] % MAX_NUMBER + 1;
      printf("%12d => %4d\n",r1[i],r2[i]);
     }
    printf("%d",RAND_MAX);
  #+end_src

  #+RESULTS:
  #+begin_example
    1169779990 =>   90
     930983597 =>   97
    1505412368 =>   68
     530674096 =>   96
    1501075191 =>   91
    1863310182 =>   82
    1971166917 =>   17
     718293902 =>    2
    1745128324 =>   24
     897181313 =>   13
  2147483647
  #+end_example

- A function to choose a secret number and store it in an /external/
  variable =secret_number=:
  #+name: choose_new_secret_number
  #+begin_src C :results none
    /*****************************************************************/
    // choose_secret_number: Randomly selects number between 1 and
    //                       MAX_NUMBER and stores it in secret_number
    /*****************************************************************/
    #define MAX_NUMBER 100;
    void choose_new_secret_number(void)
    {
      int secret_number = rand() % MAX_NUMBER + 1;
    }
  #+end_src

- Our last function is a function to read the guesses and compare them
  to the secret number.
  #+name: read_guesses
  #+begin_src C :results none
    /*******************************************************************/
    // read_guesses: Repeatedly reads user guesses and tells the user
    //               whether each guess is too low, too high, or correct.
    //               When guess is correct, prints total number of guesses
    //               and returns.
    /*******************************************************************/
    void read_guesses(void)
    {
      int guess, num_guesses = 0, secret_number;

      for (;;) { // infinite loop left if guess correct
        num_guesses++;
        printf("Enter guess: ");
        scanf("%d",&guess);
        if (guess == secret_number) {
          printf("You won in %d guesses!\n\n",num_guesses);
          return; // only allowed in void function if no argument given
        } else if (guess < secret_number)
          printf("Too low; try again.\n");
        else
          printf("Too high; try again.\n");
      }
    }
  #+end_src

- Let's put this together:
  #+name: guess.c
  #+begin_src C :main no :includes :tangle guess.c
    #include <stdio.h>
    #include <stdlib.h>
    #include <time.h>

    #define MAX_NUMBER 100 // secret number between 1 and MAX_NUMBER

    int secret_number; // external variable

    void initialize_number_generator(void);
    void choose_new_secret_number(void);
    void read_guesses(void);

    int main(void)
    {
      char command; // flag for quitting the game
      printf("Guess the secret number between 1 and %d.\n\n", MAX_NUMBER);
      initialize_number_generator();
      do {
        choose_new_secret_number();
        printf("A new number has been chosen.\n");
        read_guesses();
        printf("Play again? (Y/N) ");
        scanf(" %c", &command);
        printf("\n");
      } while (command == 'y' || command == 'Y');

      return 0;
    }

    <<initialize_number_generator>>
    <<choose_new_secret_number>>
    <<read_guesses>>
  #+end_src

  #+RESULTS: guess.c
  : Guess the secret number between 1 and 100.
  :
  : A new number has been chosen.
  : Enter guess: You won in 1 guesses!
  :
  : Play again? (Y/N)

- Practice: alter =choose_new_secret_number= and =read_guesses= so that
  =secret_number= does not have to be an external variable.

- Challenge: Can you figure out how to make the numbers repeatable so that you
  can repeat a game?

- Compare this with the "Guess the number" program in Python ([[https://github.com/birkenkrahe/cor/blob/main/org/4_guessing_game.org][GitHub]]):
  
  #+begin_example python
    import random 
    num = random.randint(1,20)
    attempt = 0 
    print("Guess my number! Enter a number between 1 and 20!")
    while True: 
        guess = int(input('Take a guess: ')) 
        attempt = attempt + 1 
        if guess < num: print("Too low")
        elif guess > num: print("Too high")
        else:
            print("Attempts: " + str(attempt))
            break
        if input("Enter 'q' to quit (or RET to continue: ")=='q': break
  #+end_example

* Review questions

1. What are the properties of /local/ variables?
   #+begin_quote
   - Automatic storage duration (storage is allocated when function is
     entered, and deallocated when it is exited)
   - Block scope (from the point of declaration to the end of the
     function block)
   #+end_quote
2. What's the effect of the =static= keyword on a variable type declaration?
   #+begin_quote
   The variable retains its value in storage until the program is
   finished. This implies that it retains its value between subsequent
   function calls while going in and out of scope.
   #+end_quote
3. What does =typedef= do, and when and why is it important?
   #+begin_quote
   - =typedef= allows you to define your own type based on a basic type,
     e.g. =typef int Bool= to define a =Bool= type, or =typedef float
     Dollar= to define a =Dollar= type of integers.
   - It is used to improve readability, maintainability, and
     portability.
   #+end_quote
4. Program organization has seven different categories - what are they
   and what is their preferred order?
   #+begin_quote
   #include directives
   #define directives
   Type definitions
   Declarations of external variables
   Prototypes for functions other than main
   Definition of main
   Definitions of other functions
   #+end_quote
5. What do you know about storage and scope of /external/ variables?
   #+begin_quote
   They have =static= storage (they are only deleted when the program is
   finished), and /file scope/ (accessible by all functions).
   #+end_quote
6. Order the five parts of the computer's memory organization,
   starting with the storage space for local variables.
   #+begin_quote
   1) STACK
   2) HEAP
   3) GLOBALS
   4) CONSTANTS
   5) CODE
   #+end_quote
7. Which storage duration modes, and which scopes do you know? Give
   examples.
   #+begin_quote
   1) Automatic storage duration: local variables e.g. inside a
      function. 'Automatic' means that the computer decides how to
      organize the memory, which is allocated when a function is
      called, and deallocated when it returns.
   2) Static storage duration: =static= variables have permanent storage
      and retain their values throughout the duration of the program.
   3) Block scope: variable is visible from its declaration to the end
      of the enclosing function body.
   4) File scope: variable is visible from its declaration everywhere,
      and available to all functions.
   #+end_quote
8. When is implicit arithmetic conversion performed?
   #+begin_quote
   1) when the operands have different types
   2) when type on left does not match type on right of ===
   3) when type of function argument does not match parameter type
   4) when type of return expression does not math return type
   #+end_quote
9. What are, and how can you handle stack overflow and underflow?
   #+begin_quote
   - When the =pop= function tries to remove a value from an empty
     stack, you get a "stack underflow", and when the =push= function
     tries to add a value to a full stack, you get a "stack overflow".
   - Call functions =stack_overflow()= and =stack_underflow()=, which
     =return EXIT_FAILURE=, a macro defined in =stdlib.h=, a non-zero
     integer, typically =1=.
   #+end_quote
10. How can you generate seeded pseudorandom numbers?
    #+begin_quote
    - You need to =include= =stdlib.h= for the =srand= and =rand= functions,
      and =time.h= for the =time= function to set the seed with =srand=.
    - The function call =rand()= will give you always the same set of
      random numbers.
    - The seed is the current time encapsulated in the number of
      seconds that have elapsed since the Epoch, the start of Unix
      system time on Jan 1, 1970.
    #+end_quote

* Exercises

- *Exercise:* show how =static= local variables work by writing a function
  with a =static int= variable.

  Solution:
  #+begin_src C :main no
    void add(void);

    int main(void)
    {
      int result;
      add();
      add();
      add();
      return 0;
    }

    void add(void)
    {
      static int i;
      i++;
      printf("add: %d\n", i);
    }
  #+end_src

  #+RESULTS:
  : add: 1
  : add: 2
  : add: 3

pp 237

* Programming Projects

1. Modify the stack example so that it stores characters instead of
   integers. Next, add a =main= function that asks the user to enter a
   series of parentheses and/or braces, then indicates whether or not
   they're properly nested:
   #+begin_example
   Enter parentheses and/or braces: ((){}{()})
   Parentheses/braces are nested properly
   #+end_example

   Hint: As the program reads characters, have it ~push~ each left
   parenthesis or left brace. When it reads a right parenthesis or
   brace, have it ~pop~ the stack and check that the item popped is a
   matching parenthesis or brace. (If not, the parentheses/braces
   aren't nested properly.) When the program reads the new-line
   character, have it check whether the stack is empty; if so, the
   parentheses/braces are matched. If the stack *isn't* empty (or if
   ~stack_underflow~ is ever called), the parentheses/braces aren't
   matched. If ~stack_overflow~ is called, have the program print the
   message ~Stack overflow~ and terminate immediately.

6. Some calculators (notably those from Hewlett-Packard) use a system
   of writing mathematical expressions known as Reverse Polish
   Notation (RPN). In this notation, operators are placed *after* their
   operands instead of *between* their operands. For example, 1 + 2
   would be written 1 2 + in RPN, and 1 + 2 * 3 would be written 1 2
   3 * +. RPN expressions can easily be evaluated using a stack. The
   algorithm involves reading the operators and operands in an
   expression from left to right, performing the following actions:

   1. When an operand is encountered, ~push~ it onto the stack.
   2. When an operator is encountered, ~pop~ its operands from the
      stack, perform the operation on those operands and then ~push~ the
      result onto the stack.

   Write a program that evaluates RPN expressions. The operands will
   be single-digit integers, The operators are ~+~, ~-~, ~*~, ~/~, and ~=~. The
   ~=~ operator causes the top stack item to be displayed; afterwards,
   the stack is cleared and the user is prompted to enter another
   expression. The process continues until the user enters a character
   that is not an operator or operand:

   #+begin_example
   Enter an RPN expression: 1 2 3 * + =
   Value of expression: 7
   Enter an RPN expression: 5 8 * 4 9 - / =
   Value of expression: -8
   Enter an RPN expression: q
   #+end_example

   If the stack overflows, the program will display the message
   `Expression is too complex` and terminate. If the stack underflows
   (because of an expression such as 1 2 + +), the program will
   display the message `Not enough operands in expression` and
   terminate.

   *Hints*: Incorporate the stack code into your program. Use ~scanf("
   %c", &ch)~ to read the operators and operands.

* Glossary

| Term                | Explanation                                                                |
|---------------------+----------------------------------------------------------------------------|
| Stack               | Memory section for local variables, used during function calls.            |
| Heap                | Memory section for dynamic allocation, managed during runtime.             |
| Globals             | Variables accessible across functions, with static storage duration.       |
| Constants           | Read-only data like string literals, stored in a dedicated memory section. |
| Code                | Memory section for executable instructions, read-only.                     |
| Static              | Keyword for local variables to retain value across function calls.         |
| Block Scope         | Visibility of a variable from its declaration to the end of a block.       |
| File Scope          | Visibility of variables/functions throughout the file post-declaration.    |
| Implicit Conversion | Automatic type conversion in mixed-type expressions.                       |
| typedef             | Creates a new type name, enhancing code readability and portability.       |

* TODO Summary

- Explores memory sections: stack, heap, globals, constants, code.
- Stack stores local variables with automatic storage duration.
- Heap manages dynamic memory, manually allocated and freed.
- Globals have static storage duration, accessible across functions.
- Constants are read-only data, stored in a specific memory section.
- Code section holds the program's executable instructions.
- =static= keyword makes local variables retain value across calls.
- Distinguish between automatic and static storage duration
- Scope determines where a variable is visible in the code.
- Distinguish between block and file scope.
- Implicit conversions occur when operands in expressions differ in type.
- Emphasizes organized program structure using external variables,
  prototypes, and type definitions.
- Practical examples include stack implementation and a number-guessing game.

* Footnotes

[fn:1]Why does C have so many types? Because it works so close to
machines and especially machine memory: to make good use of the
machine, you need to capitalize on its architecture.

[fn:2]Why does a 16-bit system difficulty with =int i = 100000;=?
Because the largest signed whole number that can be represented with
16 bits is 2^16 = 65536, since every decimal number is represented as
a sequence of bits or multiples of 2.

[fn:3]Why would =long= work here? Because a =long int= variable can
represent unsigned integers in the range [0,2^32] or [0,4294967296].

[fn:4] In fact, we've not discussed /inline functions/, which are
typically put into header files.

[fn:5] What is a "seed" value? Computer-generated random numbers
aren't actually random but pseudorandom numbers generated by some
algorithm, that is they repeat albeit after a very long period. With a
seed, the starting point for the number generation can be fixed so
that you get the same set of random numbers every time. This is useful
and necessary to obtain the sample test data.

[fn:6] You've seen this in class: the Org-mode code block header
argument =:noweb yes= allows you to use any named code block as a macro:
whatever is in the code block named =#+name: code= will be copied to the
location where =<<code>>= appears.
